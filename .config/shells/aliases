## shell-independent aliases ##
# helpers
alias ls='ls --color=auto --hyperlink=auto --group-directories-first -h'
alias ll='ls -lav --ignore=..'   # show long listing of all except ".."
alias l='ls -lav --ignore=.?*'   # show long listing but no hidden dotfiles except "."
alias count_occurenceschar='echo "grep -o \"{\" FILE | wc -l"'
alias ccbuild='mkdir -p build; cd build;' # change create build
alias ccdebug='mkdir -p debug; cd debug;' # change create debug
alias cdnvimplugs='cd ${HOME}/.local/share/nvim/site/pack/packer/start'
alias mold_make='${HOME}/dev/git/cpp/mold/mold -run make -j8'
alias readcommentsectionELF='readelf -p .comment'
alias replunderscore='for f in *\ *; do mv "$f" "${f// /_}"; done'
alias sortby_filesize='echo "find FILE -type f -exec wc -l {} + | sort -rn"'
#pidof name, pgrep name, pgrep -P pid, pidstat -p 51648, ls /proc/pid
#alias checkemptyspace='for f in *\ *; do echo="$f"; done' #; if ! test -z "$FAIL"; then echo "emptyspace in file" fi'
## TODO remove non-unix and non-portable symbols in filenames and folder names
alias helpuser='echo "appimage_update gitreb gitrm replunderscore"'
alias helpcommonuser='echo "bashrc firejail_build nvim tmuxst tmuxat foxla sfoxla tbirdla"'
#TIMENOW_SEC=$(date +"%Y%m%d_%H%M%S")
#FILENAME=somefile.tar.gz
#echo "filename and remove 2 dots from end + append filetype pdf: ${FILENAME%%.*}.pdf"
#echo "filename and remove 1 dot  from end + append filetype    : ${FILENAME%.*}"
#echo "filename unchanged: ${FILENAME}"
#my_nev_var=${my_var/foo/bar}
#pdftk in.pdf cat 3 output out.pdf
#get internet adapters: nmcli
#get local network address: ifconfig, nmap -sL loclanetworkprefix.*
#printer: cupsenable, cupsdisable, lpstat, lprm, lpstat -u
#usb-stick: ls /dev/disk/, fdisk /dev/sdX, p,d,n,t=>b,a(activate), mkfs -t vfat /dev/sdX1
#hard-drive: same except t=>L, mkfs -t ext4 /dev/sdX1 (for $HOME)
#uncompress/untar/unzip: gzip -dk file.gz, tar -xf archive.tar.xz, unzip archive.zip
#tar x extract, z through gzip, f file as input, O extract to stdout
#write usb stick: dd if=file.iso of=/dev/disk2 bs=4M status=progress conv=fdatasync
#compress/tar/zip: gzip -k files, tar -f? folder, zip -r folder.zip folder
#run commands at specific time: at (programs needs daemon config after installation)
#or in 1h `sleep 3600 ; ./run.sh`
#tmpfs: df -h /tmp
#suspend in 5min: systemd-run --on-active="5m" suspend,  systemctl suspend
#valgrind leakcheck:
#gdb --tui, --ex run, set tui enable
#gdb --args ./runTests --gtest_filter=Br* --gtest_break_on_failure
#gdb: 'i b' list breakpoints, l list LOC around, p print val
#gdb: r (re)run, b [file]:LOC|function|*addr|+-offset,
#gdb: d del breakpoint(s), dis disable breakpoint(s)
#gdb: c continue, s single-step into, n single-step over,
#gdb: q quit,
#gdb: checkpoint (save snapshot), info checkpoints, restart checkid
#gdb: delete checkpoint checkid,

# help
# tldr, man -f page ie man 2 select,

#VBoxManage modifyvm "VMname" --natpf1 "guestssh,tcp,,3022,,22" OR graphically on port forwarding without any IP
alias shared_folder_mnt='sshfs -p 3022 user@localhost:/home/user /home/misterspoon/VirtualBox\ VMs/shared_folder'
alias rwthvpn='sudo openconnect -u jh027527 --passwd-on-stdin --authgroup "RWTH-VPN (Split Tunnel)" vpn.rwth-aachen.de'
#KVM
##alias kvm_virsh='sudo virsh net-start default'
# error: network default coult not be created
# error: can not create virbr0: missing package
#better use bare qemu commands for performance

# appimages
alias       viapp='${HOME}/.local/appimages/nvim.appimage'
alias   syncmyl2p='QT_QPA_PLATFORM="xcb" "$HOME/.local/appimages/syncmyl2p.AppImage";'
alias     freecad='QT_QPA_PLATFORM="xcb" "$HOME/.local/appimages/FreeCAD.AppImage";'

alias      viasan='UBSAN_OPTIONS=print_stacktrace=1 ASAN_OPTIONS=log_path=/tmp/nvim_asan ${HOME}/.local/asan_nvim/bin/nvim'
alias          vi='${HOME}/.local/nvim/bin/nvim'
alias         jvi='firejail ${HOME}/.local/nvim/bin/nvim'
alias         cvi='${HOME}/.local/nvim/bin/nvim -u NONE'
alias         dvi='${HOME}/.local/nvim/bin/nvim -u DEFAULT'
alias      histup='${HOME}/.local/nvim/bin/nvim "/var/log/pacman.log"'
alias     aliases='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.config/shells/aliases"'
alias      bashrc='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.bashrc"'
alias aliases_git='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.config/shells/aliases_git"'
alias aliases_nix='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.config/shells/aliases_nix"'
#oh shell can not fix the underlying misconceptions of shell:
#https://arcan-fe.com/2022/04/02/the-day-of-a-new-command-line-interface-shell/
#alias  aliases_oh='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.config/shells/aliases_oh"'
alias  templates='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/templates"'
#alias      initrc='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.config/ion/initrc"'
# factory defaults: neovim --clean, neovim -u init.lua, neovim --clean -u init.lua file.zig (debugging plugins)

alias        fbim='./configure && ${HOME}/dev/git/cpp/mold/mold -run make && sudo make install-strip && sudo firecfg && sudo -K'
alias         fbi='./configure && make && sudo make install-strip && sudo firecfg && sudo -K'
alias         nb='${HOME}/dev/git/cpp/mold/mold -run make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/nvim install'
alias       nbnm='make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/nvim install'
# unfortunately mold can still not link clang address sanitizer libraries as they patch libc symbols in a nontrivial way
#alias      nbasan='CMAKE_EXTRA_FLAGS="-DCMAKE_C_COMPILER=clang -DCLANG_ASAN_UBSAN=1" ${HOME}/dev/git/cpp/mold/mold -run make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/asan_nvim install'
alias      nbasan='CMAKE_EXTRA_FLAGS="-DCMAKE_C_COMPILER=clang -DCLANG_ASAN_UBSAN=1" make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/asan_nvim install'
alias      stylua='stylua --indent-type Spaces --quote-style AutoPreferSingle'
#alias     luamake='${HOME}/.local/lua-language-server/3rd/luamake/luamake'
alias      hbuild='git submodule update --init --recursive --depth 1 && git merge --ff-only origin/master && ${HOME}/dev/git/cpp/mold/mold -run cargo install --path helix-term'

# Rust
# cargo metadata --format-version=1 | jq -r ".packages|map(.name)|.[]" | wc -l

# build + languages
alias ccompilejson='cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1'
alias cdebugsymbols='cmake -DCMAKE_BUILD_TYPE="Debug"'
alias ccompilejsondebugsymbols='cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE="Debug"'
alias jumakie='julia -J "$HOME/.local/so/sys_makie.so"'
alias juplots='julia -J "$HOME/.local/so/sys_plots.so"'

# Zig
alias   arocc='${HOME}/dev/git/zig/arocc/zig-out/bin/arocc'
#alias  zigcc='${HOME}/dev/git/zig/zig-bootstrap/out/zig-native-native/bin/zig cc'
#alias zigcpp='${HOME}/dev/git/zig/zig-bootstrap/out/zig-native-native/bin/zig c++'
# GLOB_CACHE=$(zig env | jq '.global_cache_dir') # ${HOME}/.cache/zig
# curl -s https://ziglang.org/download/index.json | jq '.master'.'"x86_64-linux"'.'"tarball"'
# the following zb1 aliases dont work for stage2
#./build/zig test lib/std/fmt.zig --zig-lib-dir lib --main-pkg-path lib/std
#alias zb1fancy='${HOME}/dev/git/buildzig/zig-bootstrap.git/tmp/out/zig-x86_64-linux-musl-native/bin/zig build -Dstage1 --zig-lib-dir lib --search-prefix ${HOME}/dev/git/buildzig/zig-bootstrap.git/musl/out/host'
alias   zb1='cd build/ && cmake .. -DZIG_STATIC_LLVM=on -DCMAKE_PREFIX_PATH="$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/host/" -GNinja && /usr/bin/time -v ${HOME}/dev/git/cpp/mold/mold -run ninja && cd ..'
alias zb1nb='cmake .. -DZIG_STATIC_LLVM=on -DCMAKE_PREFIX_PATH="$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/host/" -GNinja && /usr/bin/time -v ${HOME}/dev/git/cpp/mold/mold -run ninja'
alias zbdeb1='cd debug/ && cmake .. -DCMAKE_BUILD_TYPE=Debug -DZIG_STATIC_LLVM=on -DCMAKE_PREFIX_PATH="$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/host/" -GNinja && /usr/bin/time -v ${HOME}/dev/git/cpp/mold/mold -run ninja && cd ..'
#alias zbdebllvm='cd debug/ && cmake .. -DCMAKE_BUILD_TYPE=Debug -DZIG_STATIC_LLVM=on -DCMAKE_PREFIX_PATH="$HOME/dev/git/buildzig/zig-bootstrap.git/musl-debug/out/host/" -GNinja && /usr/bin/time -v ${HOME}/dev/git/cpp/mold/mold -run ninja && cd ..'
alias zboot='${HOME}/.local/zig/zig'
alias zbi='${HOME}/dev/git/zig/zig/bisect/build/zig'
alias zigstd='${HOME}/.local/appimages/nvim.appimage ${HOME}/dev/git/zig/zig/master/lib/std'
alias zdev='${HOME}/dev/git/zig/zig/dev/build/zig'
#alias zb2
#alias zt2
#also breaks on stage2 (no difference)
#./zig build test-stage2 -Denable-llvm -Dskip-compile-errors -fqemu -fwasmtime -fwine
#alias zig2test='./zig-out/bin/zig test ../test/behavior.zig -fLLVM -I ../test'
#/zig-out/bin/zig test ../test/behavior.zig -I ../test -fLLVM
#/zig-out/bin/zig test ../test/behavior.zig -I ../test -ofmt=c
alias rmzigallcache='rm -fr zig-cache/ zig-out/ "${HOME}"/.cache/zig/'
alias rmzigcache='rm -fr zig-cache/ zig-out/'

# sandboxing with firejail (enp4s0|wlan0)
# firefox requires profile lookup, even though they provide an option to set the direct path for the profile
alias   nojail='firejail --noprofile'
alias  njfoxPM='firejail --noprofile firefox --ProfileManager'
#alias   falketh='TMP1="${HOME}/tmpf/falk"   && test -d "${TMP1}" || mkdir ${TMP1} && firejail --net=enp4s0 --x11=xpra --allow=${TMP1}  falkon  && echo   "${TMP1}"'
alias   falketh='TMP1="${HOME}/tmpf/falk"   && test -d "${TMP1}" || mkdir ${TMP1} && firejail --net=enp4s0 --whitelist=${TMP1}  falkon  && echo   "${TMP1}"'
alias  sfalketh='TMP2="${HOME}/tmpf/sfalk"  && test -d "${TMP2}" || mkdir ${TMP2} && firejail --net=enp4s0 --private=${TMP2}               falkon  && rm -fr "${TMP2}"'
alias ssfalketh='TMP3="${HOME}/tmpf/ssfalk" && test -d "${TMP3}" || mkdir ${TMP3} && firejail --net=enp4s0 --x11=xpra --private=${TMP3}    falkon  && echo   "${TMP3}"'
alias   falkwlan='TMP1="${HOME}/tmpf/falk"   && test -d "${TMP1}" || mkdir ${TMP1} && firejail --net=wlan0 --whitelist=${TMP1}  falkon  && echo   "${TMP1}"'
alias  sfalkwlan='TMP2="${HOME}/tmpf/sfalk"  && test -d "${TMP2}" || mkdir ${TMP2} && firejail --net=wlan0 --private=${TMP2}               falkon  && rm -fr "${TMP2}"'
alias ssfalkwlan='TMP3="${HOME}/tmpf/ssfalk" && test -d "${TMP3}" || mkdir ${TMP3} && firejail --net=wlan0 --x11=xpra --private=${TMP3}    falkon  && echo   "${TMP3}"'
#alias    foxla='TMP4="${HOME}/tmpf/fox"    && test -d "${TMP4}" || mkdir ${TMP4} && firejail --net=wlan0 --whitelist=${TMP4} --allow=$HOME/.mozilla/firefox/profiles.ini --allow=$HOME/.mozilla/firefox/default firefox -P default && rm -fr "${TMP4}"'
#alias   sfoxla='TMP5="${HOME}/tmpf/sfox"   && test -d "${TMP5}" || mkdir ${TMP5} && firejail --net=wlan0 --private=${TMP5} --allow=$HOME/.mozilla/firefox/profiles.ini --allow=$HOME/.mozilla/firefox/allAllowed firefox -P allAllowed && rm -fr "${TMP5}"'
alias    foxeth='TMP4="${HOME}/tmpf/fox"    && test -d "${TMP4}" || mkdir ${TMP4} && firejail --net=enp4s0 --whitelist=${TMP4} firefox -P default && rm -fr "${TMP4}"'
alias    foxwlan='TMP4="${HOME}/tmpf/fox"    && test -d "${TMP4}" || mkdir ${TMP4} && firejail --net=wlan0 --whitelist=${TMP4} firefox -P default && rm -fr "${TMP4}"'
alias   sfoxeth='TMP5="${HOME}/tmpf/sfox"   && test -d "${TMP5}" || mkdir ${TMP5} && firejail --net=enp4s0 --private=${TMP5} firefox              && rm -fr "${TMP5}"'
alias   sfoxwlan='TMP5="${HOME}/tmpf/sfox"   && test -d "${TMP5}" || mkdir ${TMP5} && firejail --net=wlan0 --private=${TMP5} firefox              && rm -fr "${TMP5}"'
alias  tbirdeth='TMP6="${HOME}/tmpf/tbird"  && test -d "${TMP6}" || mkdir ${TMP6} && firejail --net=enp4s0 --whitelist=${TMP6}         thunderbird && rm -fr "${TMP6}"'
alias  tbirdwlan='TMP6="${HOME}/tmpf/tbird"  && test -d "${TMP6}" || mkdir ${TMP6} && firejail --net=wlan0 --whitelist=${TMP6}         thunderbird && rm -fr "${TMP6}"'
alias ffoxnoprofile='firejail --noprofile firefox --profileManager'

# sandboxing chromium (enp4s0|wlan0)
alias schrometh='firejail --net=enp4s0 --private chromium duckduckgo.com'
alias schromwlan='firejail --net=wlan0 --private chromium duckduckgo.com'
# persistent profiles: replace google-chrome with chromium
#cat ${HOME}/.config/google-chrome/Default/Preferences | jq '.default_search_provider_data.template_url_data={ "keyword": "duckduckgo.com", "short_name": "DuckDuckGo", "suggestions_url": "https://duckduckgo.com/ac/?q={searchTerms}&type=list", "url": "https://duckduckgo.com/?q={searchTerms}&t=canonical" }' >adapted-preferences.json
#mv adapted-preferences.json ~/.config/google-chrome/Default/Preferences
#
# rsync
alias rsync_copy='rsync -avz --progress -h'
alias rsync_move='rsync -avz --progress -h --remove-source-files'
alias rsync_update='rsync -avzu --progress -h'
alias rsync_synchronize='rsync -avzu --delete --progress -h'
alias cpv='rsync -pogbr -hhh --backup-dir=/tmp/rsync -e /dev/null --progress'

# program aliases
alias l='exa'
alias du='dust'
alias rgv='rg --vimgrep'
#rg -g '!pattern' or \!pattern or '!{m1,m2,}' to ignore patterns -n for line numbers -B before -A after -c count[-matches] -x entirey line match(^...$)
#rg -g '*.rs' to ignore file ending
#rg --max-depth -U multiline match -I no filename -r replace text -z search compressed files --stat -t type (--type-list)
#rg --vimgrep lines+columns -u[u[u]] unrestricted
#rg -F 'fixed_string'
#rg '\bword\b' word boundaries
#PCRE: ?(0 or 1 or more)|*(0 or more)|+(1 or more) all greedy. posessive added +, lazy added ?
#{n}(exactly),{n,m}(at least n, no more than m),

# POSIX misses current shell recognition and shell conformity
# most sane solution and reliable way is to use shell-specifc VERSION:
# ie FISH_VERSION, BASH_VERSION, ZSH_VERSION, etc
# does not work for dash and ion
alias sudo='sudo '
# cd !$ => insert last argument of previous command
#shopt -s cdspell
#complete -d cd
