## shell-independent aliases ##
# \time to use gnu time might be bash only

alias rp=' realpath'
alias pxcl='pwd | xclip -sel clip -i'
alias pwcl='pwd | wl-copy'
#alias ls='ls -lav --ignore=.?*'   # show long listing but no hidden dotfiles except "."
alias count_occurenceschar='echo "grep -o \"{\" FILE | wc -l"'
alias rmmkdbuild='rm -fr build/; mkdir build'
alias mma='${HOME}/dev/git/cpp/mold/build/mold -run make -j$(nproc)'
alias readcommentsectionELF='readelf -p .comment'
alias replunderscore='for f in *\ *; do mv "$f" "${f// /_}"; done'
alias sortby_filesize='echo "find FILE -type f -exec wc -l {} + | sort -rn"'
alias sus='systemctl suspend'
alias chmb='chmod +x ./b.sh'
alias chmt='chmod +x ./t.sh'
#pidof name, pgrep name, pgrep -P pid, pidstat -p 51648, ls /proc/pid
#To query ip+port of active processes install net-tools and use
#netstat -plnt
#alias checkemptyspace='for f in *\ *; do echo="$f"; done' #; if ! test -z "$FAIL"; then echo "emptyspace in file" fi'
## TODO remove non-unix and non-portable symbols in filenames and folder names
alias helpuser='echo "appimage_update gitreb gitrm replunderscore"'
alias helpcommonuser='echo "bashrc firejail_build nvim tmuxst tmuxat foxla sfoxla tbirdla"'
#TIMENOW_SEC=$(date +"%Y%m%d_%H%M%S")
#FILENAME=somefile.tar.gz
#echo "filename and remove 2 dots from end + append filetype pdf: ${FILENAME%%.*}.pdf"
#echo "filename and remove 1 dot  from end + append filetype    : ${FILENAME%.*}"
#echo "filename unchanged: ${FILENAME}"
#my_nev_var=${my_var/foo/bar}
#pdftk in.pdf cat 3 output out.pdf
#get internet adapters: nmcli
#get local network address: ifconfig, nmap -sL loclanetworkprefix.*
#scan local devices of network: nmap -sP addresses.*
#scan local devices for port 80,443: nmap -p 80,443 addresses.*
#sudo nmap -p 22 192.168.X.0/24
#nmap -sV 192.168.X.0/24 | grep -wE '(scan report|ssh)'
#nmap -sV -p 22 192.168.X.0/24 -oG nmap_output
#sudo nmap -sn 192.168.X.0/24 -oG nmap_output
#printer: cupsenable, cupsdisable, lpstat, lprm, lpstat -u
#usb-stick: ls /dev/disk/, fdisk /dev/sdX, p,d,n,t=>b,a(activate), mkfs -t vfat /dev/sdX1
#hard-drive: same except t=>L, mkfs -t ext4 /dev/sdX1 (for $HOME)
#uncompress/untar/unzip: gzip -dk file.gz, tar -xf archive.tar.xz -C subdir, unzip archive.zip
#tar x extract, z through gzip, f file as input, O extract to stdout
#write usb stick: dd if=file.iso of=/dev/disk2 bs=4M status=progress conv=fdatasync
#prepare mount points: sudo mkdir /mnt/iso, sudo umount /mnt/iso
#mount iso file: sudo mount file.sio /mnt/iso -o loop
#change owner: sudo chown -R USER:GROUP FILE, flag --from=USER:GROUP, symbolic link -h
#compress/tar/zip: gzip -k files, tar -f archive files, zip -r folder.zip dir
#7z a testfiles.7z file1, 7z x testfiles.7z
# NEVER use 7z e unless wanting to have cluttered files around
#run commands at specific time: at (programs needs daemon config after installation)
#or in 1h `sleep 3600 ; ./run.sh`
#tmpfs: df -h /tmp
#suspend in 5min: systemd-run --on-active="5m" suspend,  systemctl suspend
#valgrind leakcheck:
#gdb --tui, --ex run, set tui enable
#gdb --args ./runTests --gtest_filter=Br* --gtest_break_on_failure
#gdb: 'i b' list/print breakpoints, l list LOC around, p print val
#gdb: r (re)run, b [file]:LOC|function|*addr|+-offset,
#gdb: d del breakpoint(s), dis disable breakpoint(s)
#gdb: c continue, s single-step into, n single-step over, fin(ish) current scope,
#gdb: up oen context level on stack (to caller), do(wn)
#gdb: q quit,
#gdb: checkpoint (save snapshot), info checkpoints, restart checkid
#gdb: delete checkpoint checkid,

# help
# tldr, man -f page ie man 2 select,

#VBoxManage modifyvm "VMname" --natpf1 "guestssh,tcp,,3022,,22" OR graphically on port forwarding without any IP
alias shared_folder_mnt='sshfs -p 3022 user@localhost:/home/user /home/misterspoon/VirtualBox\ VMs/shared_folder'
alias rwthvpn='sudo openconnect -u jh027527 --passwd-on-stdin --authgroup "RWTH-VPN (Split Tunnel)" vpn.rwth-aachen.de'
#KVM
##alias kvm_virsh='sudo virsh net-start default'
# error: network default coult not be created
# error: can not create virbr0: missing package
#better use bare qemu commands for performance

# appimages are intended as "always working default", even though
# they dont work within WSL1 or anything non-unix.
alias     freecad='QT_QPA_PLATFORM="xcb" "$HOME/.local/appimages/FreeCAD.AppImage";'
alias        viasan='UBSAN_OPTIONS=print_stacktrace=1 ASAN_OPTIONS=log_path=/tmp/nvim_asan ${HOME}/.local/asan_nvim/bin/nvim'

alias           via='${HOME}/.local/appimages/nvim.appimage'
alias          jvia='firejail ${HOME}/.local/appimages/nvim.appimage'
alias          cvia='${HOME}/.local/appimages/nvim.appimage -u NONE'
alias          dvia='${HOME}/.local/appimages/nvim.appimage -u DEFAULT'
alias        histup='${HOME}/.local/appimages/nvim.appimage "/var/log/"' # pacman.log or apt/
alias       aliases='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.config/shells/aliases"'
alias        bashrc='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.bashrc"'
alias        fishrc='${HOME}/.local/appimages/nvim.appimage "$HOME/.config/fish/config.fish"'
alias           dfs='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/"'
alias   aliases_git='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.config/shells/aliases_git"'
alias   aliases_nix='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.config/shells/aliases_nix"'
alias     templates='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/templates"'

alias            vi='${HOME}/.local/nvim/bin/nvim'
alias           jvi='firejail ${HOME}/.local/nvim/bin/nvim'
alias           cvi='${HOME}/.local/nvim/bin/nvim -u NONE'
alias           dvi='${HOME}/.local/nvim/bin/nvim -u DEFAULT'
alias      histupvi='${HOME}/.local/nvim/bin/nvim "/var/log/"' # pacman.log or apt/
alias     aliasesvi='${HOME}/.local/nvim/bin/nvim "$HOME/dotfiles/.config/shells/aliases"'
alias      fishrcvi='${HOME}/.local/nvim/bin/nvim "$HOME/dotfiles/.config/fish/config.fish"'
alias aliases_gitvi='${HOME}/.local/nvim/bin/nvim "$HOME/dotfiles/.config/shells/aliases_git"'
alias aliases_nixvi='${HOME}/.local/nvim/bin/nvim "$HOME/dotfiles/.config/shells/aliases_nix"'
alias   templatesvi='${HOME}/.local/nvim/bin/nvim "$HOME/dotfiles/templates"'
#oh shell can not fix the underlying misconceptions of shell:
#https://arcan-fe.com/2022/04/02/the-day-of-a-new-command-line-interface-shell/
#alias  aliases_oh='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.config/shells/aliases_oh"'
#alias      initrc='${HOME}/.local/appimages/nvim.appimage "$HOME/dotfiles/.config/ion/initrc"'
# factory defaults: neovim --clean, neovim -u init.lua, neovim --clean -u init.lua file.zig (debugging plugins)

# fixup neovim installation
# rm ~/.local/nvim/lib/nvim/parser/c.so
# rm ~/.local/nvim/lib/nvim/parser/cpp.so
alias        fbim='./configure && ${HOME}/dev/git/cpp/mold/build/mold -run make && sudo make install-strip && sudo firecfg && sudo -K'
alias         fbi='./configure && make && sudo make install-strip && sudo firecfg && sudo -K'
alias          nb='${HOME}/dev/git/cpp/mold/build/mold -run make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/nvim install'
alias        nbnj='firejail --noprofile ${HOME}/dev/git/cpp/mold/build/mold -run make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/nvim install'
alias      nbnjnm='firejail --noprofile make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/nvim install'
alias        nbnm='make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/nvim install'
# unfortunately mold can still not link clang address sanitizer libraries as they patch libc symbols in a nontrivial way
#alias      nbasan='CMAKE_EXTRA_FLAGS="-DCMAKE_C_COMPILER=clang -DCLANG_ASAN_UBSAN=1" ${HOME}/dev/git/cpp/mold/build/mold -run make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/asan_nvim install'
alias      nbasan='CMAKE_EXTRA_FLAGS="-DCMAKE_C_COMPILER=clang -DCLANG_ASAN_UBSAN=1" make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/asan_nvim install'
alias      stylua='stylua --indent-type Spaces --quote-style AutoPreferSingle'
#alias     luamake='${HOME}/.local/lua-language-server/3rd/luamake/luamake'
alias      hbuild='git submodule update --init --recursive --depth 1 && git merge --ff-only origin/master && ${HOME}/dev/git/cpp/mold/build/mold -run cargo install --path helix-term'

# Rust
# cargo metadata --format-version=1 | jq -r ".packages|map(.name)|.[]" | wc -l

# build + languages
alias ccompilejson='cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1'
alias cdebugsymbols='cmake -DCMAKE_BUILD_TYPE="Debug"'
alias ccompilejsondebugsymbols='cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE="Debug"'
alias jumakie='julia -J "$HOME/.local/so/sys_makie.so"'
alias juplots='julia -J "$HOME/.local/so/sys_plots.so"'

# Zig
# Major "--debug-log" targets are: compilation, module, sema, codegen, and link
# requires debug mode or to set -Dlog=true on compiling Zig
#alias  zbcmdebglibc='mkdir -p build/ && cd build/ && cmake .. -DCMAKE_PREFIX_PATH="$HOME/dev/git/bootstrap/zig-bootstrap/glibc/out/host/" -GNinja && \time -v ninja install && cd ..'
alias  zbcmdeb='cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH="$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/host/" -GNinja && \time cmake -B build'
alias  zbcmrel='cmake -B buildrel -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/host/" -GNinja && \time cmake -B buildrel'
# cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$HOME/.local/llvm/" -GNinja && \time -v ninja install
#alias   zbcmrs='mkdir -p buildrs/ && cd buildrs/ && cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_PREFIX_PATH="$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/host/" -GNinja && \time -v ninja install && cd ..'
alias    zwtmp='mkdir -p zig-cache/tmp && inotifywait -m -r zig-cache/tmp/'

# the zig-bootstrap version is usually too old to build current master
# alias  zbdebb='\time -v "${HOME}/dev/git/bootstrap/zig-bootstrap/musl/out/zig-x86_64-linux-musl-native/bin/zig" build -p stage3 --search-prefix "${HOME}/dev/git/bootstrap/zig-bootstrap/musl/out/x86_64-linux-musl-native" --zig-lib-dir lib -Dstatic-llvm'
# alias  zbrelb='\time -v "${HOME}/dev/git/bootstrap/zig-bootstrap/musl/out/zig-x86_64-linux-musl-native/bin/zig" build -p stage3 -Dreleaase --search-prefix "${HOME}/dev/git/bootstrap/zig-bootstrap/musl/out/x86_64-linux-musl-native" --zig-lib-dir lib -Dstatic-llvm'
alias  zbdeb='${HOME}/dev/git/zi/zig/master/buildrel/stage3/bin/zig build -p deb -Doptimize=Debug --search-prefix "$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/x86_64-linux-musl-native" --zig-lib-dir lib -Dstatic-llvm'
alias  zbrel='${HOME}/dev/git/zi/zig/master/buildrel/stage3/bin/zig build -p rel -Doptimize=ReleaseSafe --search-prefix "$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/x86_64-linux-musl-native" --zig-lib-dir lib -Dstatic-llvm'
alias   zdeb='{$HOME}/dev/git/zi/zig/master/rel/bin/zig build -p deb -Doptimize=Debug --search-prefix "$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/x86_64-linux-musl-native" --zig-lib-dir lib -Dstatic-llvm'
alias   zrel='{$HOME}/dev/git/zi/zig/master/rel/bin/zig build -p rel -Doptimize=ReleaseSafe --search-prefix "$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/x86_64-linux-musl-native" --zig-lib-dir lib -Dstatic-llvm'
alias  zdoc='cd ${HOME}/dev/git/zi/zig/master/buildrel/stage3/lib/zig/docs/'
# langref is created in ./zig-cache/langref.html
# libstd docs are created in lib/zig/docs/
alias  zref='cd ${HOME}/tmpf/sfox'
#alias   zbrs='${HOME}/dev/git/zi/zig/master/buildrs/stage3/bin/zig build -p rs -Drelease --search-prefix "$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/x86_64-linux-musl-native" --zig-lib-dir lib -Dstatic-llvm'
alias   zup1='./build/stage3/bin/zig build update-zig1'
#alias  zbsrel='mkdir -p buildrel/ && cd buildrel/ && cmake .. -CMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$HOME/dev/git/bootstrap/zig-bootstrap/musl/out/host/" -GNinja && \time -v ${HOME}/dev/git/cpp/mold/build/mold -run ninja install && cd ..'
#alias  zbsrel='cmake -B buildrel -CMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="../../zig-bootstrap/musl/out/host/" -GNinja && time cmake -B buildrel -j $(nproc)'
# NOTE: crosscompiling zig compiler from glibc to musl requires also crosscompiling LLVM
#mkdir -p build_rel/ && cd build_rel/ && cmake .. -DCMAKE_PREFIX_PATH="${HOME}/local/llvm15-release" -GNinja && \time -v ${HOME}/dev/git/cpp/mold/build/mold -run ninja install && cd ..
#mkdir -p build_deb/ && cd build_deb/ && cmake .. -DCMAKE_PREFIX_PATH="${HOME}/local/llvm15-debug" -GNinja && \time -v ${HOME}/dev/git/cpp/mold/build/mold -run ninja install && cd ..
# alias  zblocrel='mkdir -p build_rel/ && cd build_rel/ && cmake .. -DCMAKE_PREFIX_PATH="${HOME}/local/llvm15-release" -GNinja && \time -v ${HOME}/dev/git/cpp/mold/build/mold -run ninja install && cd ..'
# alias  zblocdeb='mkdir -p build_deb/ && cd build_deb/ && cmake .. -DCMAKE_PREFIX_PATH="${HOME}/local/llvm15-debug" -GNinja && \time -v ${HOME}/dev/git/cpp/mold/build/mold -run ninja install && cd ..'
alias      zd='$HOME/dev/git/zi/zig/master/build/stage3/bin/zig'
# alias      zd='./deb/stage3/bin/zig'
# alias      zr='./rel/stage3/bin/zig'
alias      zn='${HOME}/dev/git/zi/zig/master/rel/bin/zig'
alias   arocc='${HOME}/dev/git/zi/arocc/zig-out/bin/arocc'
alias  zigdebc='${HOME}/dev/git/zi/zig/debug/build/stage3/bin/zig'
alias  zigdeb='${HOME}/dev/git/zi/zig/debug/stage3/bin/zig'
# GLOB_CACHE=$(zig env | jq '.global_cache_dir') # ${HOME}/.cache/zig
# curl -s https://ziglang.org/download/index.json | jq '.master'.'"x86_64-linux"'.'"tarball"'
alias  zigstd='${HOME}/.local/appimages/nvim.appimage ${HOME}/dev/git/zi/zig/master/lib/std'
# -lc to link libc, --lib-dir to use non-standard lib directory (defined in global env)
#./zig build test-stage2 -Denable-llvm -Dskip-compile-errors -fqemu -fwasmtime -fwine
#zigtest is pending support for pipes other than the standard ones to be robust
#alias zig2test='./zig-out/bin/zig test ../test/behavior.zig -fLLVM -I ../test'
alias rmzigallcache='rm -fr zig-cache/ zig-out/ "${HOME}"/.cache/zig/'
alias rmzigcacherec='fd -t d -u "zig-out|zig-cache" -x rm -fr {};'
#rm -fr zig-cache/ zig-out/'
#find -type d "zig-out|zig-cache" -exec rm -fr {} \;

# sandboxing with firejail (enp4s0|wlan0)
# firefox requires profile lookup, even though they provide an option to set the direct path for the profile
alias   nojail='firejail --noprofile'
alias  njfoxPM='firejail --noprofile firefox --ProfileManager'
alias ffoxnoprofile='firejail --noprofile firefox --profileManager'
#alias   falketh='TMP1="${HOME}/tmpf/falk"   && test -d "${TMP1}" || mkdir ${TMP1} && firejail --net=enp4s0 --x11=xpra --allow=${TMP1}  falkon  && echo   "${TMP1}"'
alias    falketh='TMP1="${HOME}/tmpf/falk"   && test -d "${TMP1}" || mkdir ${TMP1} && firejail --net=enp4s0 --whitelist=${TMP1}  falkon  && echo   "${TMP1}"'
alias   sfalketh='TMP2="${HOME}/tmpf/sfalk"  && test -d "${TMP2}" || mkdir ${TMP2} && firejail --net=enp4s0 --private=${TMP2}               falkon  && rm -fr "${TMP2}"'
alias  ssfalketh='TMP3="${HOME}/tmpf/ssfalk" && test -d "${TMP3}" || mkdir ${TMP3} && firejail --net=enp4s0 --x11=xpra --private=${TMP3}    falkon  && echo   "${TMP3}"'
alias   falkwlan='TMP1="${HOME}/tmpf/falk"   && test -d "${TMP1}" || mkdir ${TMP1} && firejail --net=wlan0 --whitelist=${TMP1}  falkon  && echo   "${TMP1}"'
alias  sfalkwlan='TMP2="${HOME}/tmpf/sfalk"  && test -d "${TMP2}" || mkdir ${TMP2} && firejail --net=wlan0 --private=${TMP2}               falkon  && rm -fr "${TMP2}"'
alias ssfalkwlan='TMP3="${HOME}/tmpf/ssfalk" && test -d "${TMP3}" || mkdir ${TMP3} && firejail --net=wlan0 --x11=xpra --private=${TMP3}    falkon  && echo   "${TMP3}"'
#alias    foxla='TMP4="${HOME}/tmpf/fox"    && test -d "${TMP4}" || mkdir ${TMP4} && firejail --net=wlan0 --whitelist=${TMP4} --allow=$HOME/.mozilla/firefox/profiles.ini --allow=$HOME/.mozilla/firefox/default firefox -P default && rm -fr "${TMP4}"'
#alias   sfoxla='TMP5="${HOME}/tmpf/sfox"   && test -d "${TMP5}" || mkdir ${TMP5} && firejail --net=wlan0 --private=${TMP5} --allow=$HOME/.mozilla/firefox/profiles.ini --allow=$HOME/.mozilla/firefox/allAllowed firefox -P allAllowed && rm -fr "${TMP5}"'
alias        foxeth='TMP4="${HOME}/tmpf/fox"    && test -d "${TMP4}" || mkdir ${TMP4} && firejail --net=enp4s0 --whitelist=${TMP4} firefox -P default && rm -fr "${TMP4}"'
alias       foxwlan='TMP4="${HOME}/tmpf/fox"    && test -d "${TMP4}" || mkdir ${TMP4} && firejail --net=wlan0 --whitelist=${TMP4} firefox -P default && rm -fr "${TMP4}"'
alias       sfoxeth='TMP5="${HOME}/tmpf/sfox"   && test -d "${TMP5}" || mkdir ${TMP5} && firejail --net=enp4s0 --private=${TMP5} firefox              && rm -fr "${TMP5}"'
alias      sfoxwlan='TMP5="${HOME}/tmpf/sfox"   && test -d "${TMP5}" || mkdir ${TMP5} && firejail --net=wlan0 --private=${TMP5} firefox              && rm -fr "${TMP5}"'
alias      tbirdeth='TMP6="${HOME}/tmpf/tbird"  && test -d "${TMP6}" || mkdir ${TMP6} && firejail --net=enp4s0 --whitelist=${TMP6}         thunderbird && rm -fr "${TMP6}"'
alias     tbirdwlan='TMP6="${HOME}/tmpf/tbird"  && test -d "${TMP6}" || mkdir ${TMP6} && firejail --net=wlan0 --whitelist=${TMP6}         thunderbird && rm -fr "${TMP6}"'

# sandboxing chromium (enp4s0|wlan0)
alias  schrometh='firejail --net=enp4s0 --private chromium duckduckgo.com'
alias schromwlan='firejail --net=wlan0 --private chromium duckduckgo.com'
# persistent profiles: replace google-chrome with chromium
#cat ${HOME}/.config/google-chrome/Default/Preferences | jq '.default_search_provider_data.template_url_data={ "keyword": "duckduckgo.com", "short_name": "DuckDuckGo", "suggestions_url": "https://duckduckgo.com/ac/?q={searchTerms}&type=list", "url": "https://duckduckgo.com/?q={searchTerms}&t=canonical" }' >adapted-preferences.json
#mv adapted-preferences.json ~/.config/google-chrome/Default/Preferences
#
# rsync
alias rsync_copy='rsync -avz --progress -h'
alias rsync_move='rsync -avz --progress -h --remove-source-files'
alias rsync_update='rsync -avzu --progress -h'
alias rsync_synchronize='rsync -avzu --delete --progress -h'
alias cpv='rsync -pogbr -hhh --backup-dir=/tmp/rsync -e /dev/null --progress'
#rsync -av --dry-run --delete -P --stats src target
# TODO rsync without permissions

# program aliases
#alias l='exa'
alias du='dust'
alias rgv=' rg --vimgrep --color always'
alias rgn=' rg --vimgrep'
alias rgp=' rg -p'
alias rgi="rg -g '!tests' -g '!src/include'"
#alias rgv='rg --vimgrep'

# sed: SED_PATTERN FILE
# in-place replace verbatim: sed -i 's|literal_pattern|replacement_string|g'
# in-place replace regex: sed -i -e 's/literal_pattern/replacement_string/g'
# tr can only handle single byte replacements (following does not work): tr '\n' '\\n' <file >tmpfile && mv tmpfile file
# sed does not include line endings unless told so, which is not POSIX conform
# sed -i -z 's|\n|\\\n|g' file.txt
# sed -i -z 's|\\\n|\n|g' file.txt

# find
# find ./ -maxdepth 1 -type f -exec SED_PATTERN {} \;
# rm files with exec bit: find ./ -type f -perm /1 -exec rm {} \;
# replace occurences with word
# ignore files
# find . ! -name '*.html' [! -path '*.svn*' ..] -exec grep 'SearchString' {} /dev/null \;
# list executables by change date, TODO executables
# find . -type f -executable -printf "%T@ %Tc %p\n" | sort -n
# list all sections of an elf file sorted by change time
# find dist/ -exec file {} \; | grep -i elf | cut -d':' -f1- | ls -lt

# busybox find
# find ./ -regex '.*lighttpd.*'


# fd-find
# rm files with exec bit unless script:
# fd -E excludepattern -maxdepth 1 clean.sh -t x -x rm {} \;
# find files based on extension and delete ({} is implicit if not given)
# fd -I -e o -t f -x rm {}
# find files based on regex and delete (implicit {})
# fd -I -t d zig-cache -x rm -fr
# find all files (with extension) in dir
# fd regex /some/path
# fd '' -e zig lib/std
# list files with absolute path: fd -a filename
# find last changed file: fd -x stat -f "%m%t%N" | sort -nr
# batch execution: fd --type f . --exec-batch ls -lt
# fd has no convenient way for print formatting, so one is forced to use the "changed" filters
# fd -t x --changed-before now etc dont work
# fd --type f -x sed -i -e 's/apple/orange/g'
# fd --type f -x sed -i 's;Ether;Twin;g'
# To batch process results, use -X
# Get relative path to all files in dirs matching pattern and run command per line
# fd 'Release' -t d -x realpath --relative-to=. {}/* | xargs -n1 sha256sum
# Run command per line
# cat file... | xargs -n1 command
# Match against full path via -p or --full-path
# Can do find and replace also via ripgrep
# rg -l arrow_chars | xargs -n1 sed -i 's;arrow_chars;arrow_chars_utf;g'
# rg -l -F 'parse' | xargs -n1 sed -i 's;parse;parse_utf;g'

# busybox grep (very slow)
# grep -r regex .

# ripgrep
# usese PCRE: ?(0 or 1 or more)|*(0 or more)|+(1 or more) all greedy. posessive added +, lazy added ?
# {n}(exactly),{n,m}(at least n, no more than m),
# rg -g '!pattern' or \!pattern or '!{m1,m2,}' to ignore patterns -n for line numbers -B before -A after -c count[-matches] -x entirey line match(^...$)
# TODO: figure out why globbing does not work
# rg -g '*.rs' to ignore file ending
# rg --max-depth -U multiline match -I no filename -r replace text -z search compressed files --stat -t type (--type-list)
# rg --vimgrep lines+columns -u[u[u]] unrestricted
# rg -F 'fixed_string'
# rg '\bword\b' word boundaries
# full path results:
# rg -p
# only filenames, only directory entries (must be option, not match)
# rg -l
# only show to be searched filepaths:
# rg --files
# only search for file type: -t, --type TY from --type-list


# POSIX misses current shell recognition and shell conformity
# most sane solution and reliable way is to use shell-specifc VERSION:
# ie FISH_VERSION, BASH_VERSION, ZSH_VERSION, etc
# does not work for dash and ion
alias sudo='sudo '
# cd !$ => insert last argument of previous command
#shopt -s cdspell
#complete -d cd

# --- zig test ---
# Takes ~3 minutes.
# ./deb/bin/zig build test-std -Dskip-release -Dskip-non-native
# Does not work anymore due to #14708
# zig test exec --zig-lib-dir lib --main-pkg-path lib/std
# Takes ? minutes.
# ./deb/bin/zig build test-standalone -Dskip-release -Dskip-non-native