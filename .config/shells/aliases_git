## Git aliases
# gitlab checkout MR: git mr branch number
# github checkout PR: git fetch upstream pull/ID/head:BRANCHNAME
#
# to fetch all github upstream prs, add to [remote "branch"] in .git/config:
# [remote "upstream"]
# fetch = +refs/pull/*/head:refs/remotes/upstream/pr/*
# gh-resolved = base

# git bare: git clone --bare url reponame
# git switch master
# git worktree add master glibc musl

#restore specific file
#git restore --source=COMMITHASH filename
#git restore -s=COMMITHASH filename
#root directory of current git repo
#git rev-parse --show-toplevel
#git restore --source HEAD@{10.minutes.ago} file.txt
#git restore -p file.txt

# add tag to commit
#git tag -a v1.2 9fceb02 -m "Message here"
#git push origin v1.2

#overwrite current branch with other branch without losing content
#git tag old-email-branch
#git reset --hard staging
# recover from losing (un)commited changes by git reset --hard
#git reflog show
#git reset HEAD@{2}

#remove last commit (--soft vs --hard)
#git reset HEAD~1
#git reset HEAD~1 [filename]

#patch based work
#git format-patch --stdout first_commit^..last_commit > changes.patch
#git am -3 < changes.patch

# git diff --patch > diff.patch,
# git apply [-R] diff.patch to [reverse] apply it on a codebase
# git diff COMMIT~[NR] COMMIT
# git diff --word-diff

#show specific file on revision/commit
#git show REVISION:path/to/file
#$get combined diff
#git show -m
# idea figure out how to make the following scriptable to find successor of 894e8b4e93d8f3
#git log --reverse --ancestry-path 894e8b4e93d8f3^..master | tail -1
#git rev-list --ancestry-path commit1..commit2 | tail -1
#history to specific function of file
#git log -L :function:path/to/file
#git log --name-status --follow -M50% -- pathtofile
#git log -p
#git log -p --stash
#git log --oneline --graph --all

# Get number of commits since or between commits
# git describe COMIMIT_RANGE --tag TAGNAME
# git log --oneline COMIMIT_RANGE

# github referencing: y for current commit URL

#rmgitfilesrecursive
#find . -type d -name ".git" && find . -name ".gitignore" && find . -name ".gitmodules"'

#switch to other branch in bare repo
#git branch -c new
#no within worktree folder/branch folder: fetch + merge

#get untracked files as list for scripting
#git ls-files --others --exclude-standard
#git ls-files --others --exclude-standard || rsync -av --files-from=- /pathfrom /pathto
#get file changes of a commit (-nX with X from HEAD)
alias glgn='git --no-pager log --name-only'
alias gshn='git --no-pager show --name-only'

#change file permission
#git ls-tree HEAD
#git ls-tree -r branch --name-onyl *.py
#add execution bit
#git update-index --chmod=+x script.sh

#get diffed file names by operation(adding,moving etc), lowerspace also works
#git diff COMMIT1 COMMIT2 --name-only --diff-filter=A
#Added, Copied, Deleted, Modified, Renamed + type (T changed9, Unmerged, (X unknown), Broken

# git diff all unindexed files (diff file must be stored outside the git repo)
# alias gdnew="for next in \$( git ls-files --others --exclude-standard ) ; do git --no-pager diff --no-index /dev/null \$next; done;"
#get combined diff of tracked and untracked files (diff file must be stored outside the git repo)
#{ git --no-pager diff; gdnew } > ../all.diff
# TODO: combined diff for fish vs posix shell

#get diffed file to unindexed file
#https://stackoverflow.com/questions/855767/can-i-use-git-diff-on-untracked-files
#git diff --no-index indexed unindexed
#idea get diff between worktrees
#1. git ls-files --others --exclude-standard
#2. loop through list:
#2.1. check if path prefix/unindexed exists
#2.2. if yes, add to list. otherwise add /dev/null
#3. for each listentry:
#3.1. git diff --no-index indexed unindexed
#3.2. add to result string variable
#3.3 print string variable to stdout

#untrack a file which was tracked possibly added to .gitignore
# add diff to represent empty file:
# git rm --cached [-r] file/dir
# alternative to keep index:
# git update-index --assume-unchanged <file>
# better performant alternative:
# git update-index --skip-worktree <file>
# git update-index --no-skip-worktree <file>

#delete untracked files (dry run and real one)
#git clean -d -n
#git clean -d -f
# simpler:
# git maintenance start
# adds:
# [maintenance]
#   auto = false
#   strategy = incremental

#get the raw files of current commit as tar archive
#git archive -o archive.tar
#tar -xf archive.tar

# git push of data (not deletion etc) require the local branch to have the same
# name as the remote branch or will fail with
#   error: failed to push some refs to 'git@REMOTE:REPO.git'

##### Git config #####
# fix missing remotes:
#   git config remote.downstream.fetch "+refs/heads/*:refs/remotes/downstream/*"
# TODO: fixup moving git repos
# Bare configs .bare/config referenced by file content .git look like this:
# [core]
#   repositoryformatversion = 0
#   filemode = true
#   bare = true
# [remote "downstream"]
#   url = https://github.com/ziglang/zig-bootstrap
## default
#   fetch = +refs/heads/*:refs/remotes/origin/*
## rename
#   fetch = +refs/heads/*:refs/remotes/downstream/*
# [branch "master"]
#   remote = downstream
#   merge = refs/heads/master
# Regular repo configs .git/config look like this:
# [core]
#   repositoryformatversion = 0
#   filemode = true
#   bare = false
#   logallrefupdates = true
# [remote "origin"]
#   url = https://github.com/neovim/neovim
#   fetch = +refs/heads/*:refs/remotes/origin/*
# [branch "master"]
#   remote = origin
#   merge = refs/heads/master

# aliases (like shell, but for git)
# git config --global alias.bb !better-branch.sh
# https://gist.github.com/schacon/e9e743dee2e92db9a464619b99e94eff
# REuse REcorded REsolution: keep merge conflict to reapply
# git config --global rerere.enabled true

# folks not able to configure gpg due to pin-entry reasons
# git config gpg.format ssh
# git config user.signingkey ~/.ssh/key.pub
# git cat-file -p HEAD

# speed up slow search with
# git config --global fetch.writeCommitGraph true
# git status slow
# git config --global core.untrackedcache true
# git config --global core.fsmonitor true

# TODO configs
# git config rebase.updateRefs true
# git config rebase.autosquash true

# fetch branches
# git config remote.origin.fetch '+refs/pull/*:refs/remotes/origin/pull/*'

alias gwt='git worktree'
alias grst='git restore'
alias g='git'
#ga -A all files, ga . new+modified files, ga -u deleted+modified files
alias ga='git add'
alias gaa='git add -A'
alias gau='git add -u' # add modified files
alias gap='git apply'
alias gapr='git apply -R'

# git blame
# git blame FILEPATH --since=7.days
# git blame FILEPATH -L 3,5 -e -l
# -e for mail, -l for commit hash
# git blame BRANCH -- FILEPATH
# git gui blame FILEPATH

alias gb='git branch'
alias gba='git branch -avv'
alias gbd='git branch -d'
alias gbD='git branch -D'
alias gbr='git branch --remote'
# git config --global column.ui auto
# git config --global branch.sort -commiterdate

alias gfap='git fetch --all --prune'
# git push REMOTENAME --delete deletedBranch
alias gpod='git push downstream --delete'
alias grpo='git remote prune downstream'
alias grv='git remote -v'
alias gsr='git remote show origin'

# See instructions for bisecting via script in scr/bisect.sh
#alias gbs='git bisect'
#alias gbsb='git bisect bad'
#alias gbsg='git bisect good'
#alias gbsr='git bisect reset'
#alias gbss='git bisect start'

# git checkout commit [filepath]
alias gco='git checkout'
alias gcp='git cherry-pick'
# credential helper config
# git config --global credential.helper "cache --timeout=3600"

# git commit check
# Returns whether staged files != diffed files
# Shell is hack and so is most shell tooling typically wasting more time
# than coding it yourself.
gce () {
  comm -1 -2 <(git --no-pager diff --name-only) <(git --no-pager diff --cached --name-only)
  # _gitdiffnames="$(git --no-pager diff --name-only)"
  # _gitdiffcachednames="$(git --no-pager diff --cached --name-only)"
  # if test -n "${_gitdiffnames}"; then return 0; fi
  # if test -n "${_gitdiffcachednames}"; then echo "no files staged"; return 1; fi
  # workaround comm requiring file input by letting git provide it
  # Bash/Posix SHENNANIGAN This should just work and not require tmp file hacks
  # $_diff_gdn_gdcn="$(comm -1 -2 <(git --no-pager diff --name-only) <(git --no-pager diff --cached --name-only))"
  # https://stackoverflow.com/questions/7427262/how-to-read-a-file-into-a-variable-in-shell
  # * Trailing newline removal from command expansion makes simple approach
  #   unusable and anonying to deal with.
  # * NUL character removal requires encoding and decoding file contents for shell.
  # comm -1 -2 <(git --no-pager diff --name-only) <(git --no-pager diff --cached --name-only)
  # correct and fast aside of NULL not encodable solution
  # read -rd '' content </etc/passwd
  # read -rd '' content </etc/passwd || :
  # echo _$
}

# git commit
# Recover message from .git/COMMIT_EDITMSG
alias gc='git commit -v -S' # sign is faster
alias gcn='git commit -v' # nosign
alias gcmsg='git commit -m'
alias gca='git commit --amend'
alias gcf='git commit --fixup'
alias gcs='git rebase -i --autosquash'

# To ignore indentation changes in git diff, add -w
alias gd='git diff'
alias gdc='git diff --cached'
alias gdn='git --no-pager diff --name-only'
alias gdcn='git --no-pager diff --cached'
alias gds='git --no-pager diff --shortstat'
#git diff untracked: git diff untracked file to create/append to a patch
alias gdu='git ls-files --others --exclude-standard -z | xargs -0 -n 1 git --no-pager diff /dev/null'
alias gdfa='git --no-pager diff --name-only --diff-filter=A'
alias gwch='git whatchanged -p --abbrev-commit --pretty=medium'
alias gcomf='git commit -v --fixup'

alias gf='git fetch'
alias gfd='git fetch downstream'
alias gfu='git fetch upstream'
alias gfrg='git ls-files | rg'

alias grau='git remote add upstream'
alias grad='git remote add downstream'
alias good='git remote rename origin downstream'
alias grsu='git remote set-url'
#git branch -u upstream/master master

#alias gbsum='git branch --set-upstream-to=upstream/master upstream'
alias gbm='git branch --move'
alias gbrt='git rev-parse --abbrev-ref --symbolic-full-name "@{u}"' # git branch remote tracking
#### must specify remote, adjust remote fetch (refspec) and fetch if no remote branches
# example: git branch --set-upstream-to=downstream/master [master]
alias gbsu='git branch --set-upstream-to='
alias ghh='git help'
alias gpsu='git push --set-upstream downstream $(git branch --show-current)'
alias grph='git rev-parse HEAD'

# alias gbsudDownMaster='git branch --set-upstream-to=downstream/master master'
# alias gbsudDownMain='git branch --set-upstream-to=downstream/main master'
# alias gbsudUpMaster='git branch --set-upstream-to=upstream/master master'
# alias gbsudUpMain='git branch --set-upstream-to=upstream/main master'
# alias gscbDown='git branch --set-upstream-to=downstream/$(git branch --show-current)'
# alias gscbUp='git branch --set-upstream-to=upstream/$(git branch --show-current)'

alias gshow='git show'
alias gshps='git show --pretty=short --show-signature'
alias gshm='git show -m'
alias gsb='git status -sb'
alias gss='git status -s'
alias gs='git status'
alias gsp='git status --porcelain'
alias gcl='git clone'
# git clone --filter=blob:none
# git clone --filter=tree:0

# more big repo stuff
# multipack indexes
# reachability bitmaps
# geometric repacking

# sparse checkout: setup all defaults with huge repos
# prefetching, commit-graph, fs monitor, partial cloning, sparse checkout
#  git scalar
#https://github.blog/2021-11-10-make-your-monorepo-feel-small-with-gits-sparse-index/
#https://stackoverflow.com/a/63786181

# git sparse-checkout set build base

# git rebase range to fixup author
#git rebase -r LASTGOODCOMMIT --exec 'git commit --amend --no-edit --reset-author'
alias grbe='git rebase --exec' # rebuild_cmd
alias grbm='git rebase master'
alias grbM='git rebase main'
alias grbi='git rebase -i'
alias grbaq='git rebase --autosquash'
# stacked commits to workaround github behavior with branches instead of commits
# git rebase --update-refs

#alias gsw='git switch'
alias gsafe='test -n "$(git status --porcelain)" || echo safe'
alias grbium='git rebase --interactive upstream/master'
alias grbiuM='git rebase --interactive upstream/main'
alias grmdel='git rm $(git ls-files --deleted)'

alias gignore='git update-index --assume-unchanged'
alias gignored='git ls-files -v | grep "^[[:lower:]]"'

alias gk='gitk --all --branches'
alias gke='gitk --all $(git log -g --pretty=%h)'

alias gur='git pull --rebase'
alias gu='git pull --no-rebase --ff-only'
alias glgs='git log -G' # git log search 'regex' -- file (Gitsearch the content)
alias glgr='git log --grep=' # git log grep (grep the log)
#git log --grep|--invert-grep
#git grep 'regexp' $(git rev-list --all)

#--stat --shortstat --numstat --graph --oneline
# git rev-list HEAD --count
# git rev-list release..HEAD --count
alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glo='git log --oneline --decorate'
# alias glogp="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
# https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs
# <leader>gl (short) and <leader>gll
# gitk, git gui, gitx, gitg
#git log --graph --abbrev-commit --decorate --date=relative --all
# alias gloga='git log --all --decorate --oneline --graph --stat'

# git log adogs
alias gladogs='git log --all --decorate  --oneline --graph --simplify-by-decoration'

# show only branch relation
# alias glbr0='git log --graph --all --decorate --simplify-by-decoration'
# alias glbr1='git log --graph --decorate --oneline'
# alias glbr2='git log --graph --oneline --branches'
# alias glbr3='git log --graph --oneline --branches --not --remotes=*'
# alias glbr4='git log --graph --oneline --decorate-refs=refs/heads'
# git log --graph --oneline -10 > /dev/null

# git log -S files_watcher -p
alias glsm='git ls-files -m' # modified
alias glss='git ls-files -s' # staged
alias glsa='git ls-files -mo --exclude-standard' # all non ignored
# git ls-remote

#TODO
#merge with merge message no rebase
#merge without merge message no rebase

# TODO how the hell do I get a nice parent with children commit ???
# --squash, --no-squash
# unreliable without other options working: -m "commit message"
#git merge --no-ff --no-commit --squash BRANCH
# git log --graph --decorate --pretty=oneline --abbrev-commit

# merge without forward (less reliable)
alias gm='git merge --no-ff'
alias gmce='git merge --edit --no-ff --commit'
alias gmse='git merge --squash -e --comit'
# merge with forward
alias gm='git merge --ff-only'
# dont forward and dont commit (most reliable)
alias gmn='git merge --no-ff --no-commit'
# dont forward, do commit (less reliable)
alias gmc='git merge --no-ff --commit'
alias gmom='git merge downstream/master'
alias gmt='git mergetool --no-prompt'
alias gmtvim='git mergetool --no-prompt --tool=vimdiff'
alias gmum='git merge --ff-only upstream/master'
# The following may lose data due to unability to reconstruct pre-merge state:
# alias gma='git merge --abort'

alias gp='git push'
alias gpdry='git push --dry-run'
#alias gpf='git push --force'
alias gpf='git push --force-if-includes --force-with-lease'
# git push --signed

# To show the content of a stash run
# git stash show -p STASH/STASHNUMBER
#alias gsta='git stash'
alias gstu='git stash push'
alias gsto='git stash pop'
#alias gstaa='git stash apply'
#alias gstac='git stash clear'
#alias gstad='git stash drop'
#alias gstal='git stash list'
#alias gstapop='git stash pop'
#alias gstas='git stash show --text'
#alias gstaall='git stash --all'
alias gssa='git stash show --all'
alias gsap0='git stash apply stash@{0}'

alias gsi='git submodule init'
alias gsu='git submodule update'

# search 'thefile' in history
# git log --all --full-history -- "**/thefile.*"
# more powerful: https://github.com/newren/git-filter-repo

# SHENNANIGAN
# git itself doesn't track along renames. So it ends with a rename and you
# gotta pick up the track with the new name.

# SHENNANIGAN
# fixup has no option to check, if the fixup can be cleanly applied via autosquash

# To fixup first commit with word 'second'
# git commit --fixup :/second

# git blame -L 2,5:pathtofile
# git log -L 2,5:pathtofile
# git log -L :File:pathtofile
# ignore whitespace via -w
# detect lines moved or copied in -C
# or the commit that created the file -C
# or any commit at all -C
# realistic blame:
# git blame -w -C -C -C -L 2,5 pathtofile

#====hooks
# use cases
#  commit message formatting
#  package install
#  update ctags
#  pre-commit
#  husky
#  * pre-commit install

#====LFS
# brew install git-lfs
# git cat-file -p HEAD:"bigfile.wav"

# TODO adjust for renames
##!/usr/bin/env zsh
#
#if [[ -z "$1" ]]; then
#  git log --all                                                        \
#    --full-history --name-only --color=always --pretty="format:"       \
#    | sort                                                             \
#    | uniq                                                             \
#    | rg -v "^$"                                                       \
#    | fzf                                                              \
#      --ansi --no-sort --track                                         \
#      --preview="git log --color=always -- {} | bat --color=always -p" \
#      --bind "ctrl-m:execute(zsh -c '$0 {}')"
#else
#  git log                                                                                                               \
#    --full-history                                                                                                      \
#    --pretty='format:%C(yellow)%h %Cblue%cs%Creset %s'                                                                  \
#    -- $1                                                                                                               \
#    | fzf                                                                                                               \
#      --ansi                                                                                                            \
#      --preview "git show --color=always  {1}:$1 || git show --color=always  --name-status {1} | bat --color=always -p" \
#      --bind "ctrl-m:execute(
#          git show {1}:$1 | nvim -c set\ bt=nowrite || git show {1} | nvim -c set\ bt=nowrite -
#      )"
#fi

# SHENNANIGAN setting reliably to branch is tedious
#git worktree add --track -b crt_arm_fixes crt_arm_fixes downstream/crt_arm_fixes

#====commit_hygiene_tldr
# every commit must build
# every commit must make sense as some atomic piece of work
# 1. merge    git merge --ff-only|--no-ff
#             --no-commit|--commit
# might need  git merge --no-ff --no-commit
#             -e
#             --squash|--no--quash
# 2. squash   git merge --squash|--no--quash
# https://stackoverflow.com/questions/5189560/how-do-i-squash-my-last-n-commits-together
# 3. rebase   git rebase [-i])
#
# * merge: prefer, because it represents true history (merge points, WIP commits)
#   + can revert whole merge easily via >git revert -mN MERGECOMMITSHA
#     or git revert FIRST^..LAST with ^ being first parent commit of FIRST
#     or without message git revert -n RANGE
#   + more commits make git bisect better
#   + better 20*+50/-50 than +2k/-50 changes, always
# * problems:
#   + big fundamental changes
#   + merge conflict churn of big changes
#   + high turnaround or waiting times
# * squash: WIP commits with one goal and relative small diff
# * rebase (interactively): big diff and alot WIP to selectively
#   squash and reorder commits where making sense
#
# Expected unless OSS and you (can) take the time.

#====checks
#has git: git rev-parse --is-inside-work-tree
#git commit sha: git rev-parse HEAD
#git file version-controlled (0 ok, 1 not): git ls-files --error-unmatch FILEPATH
#git config --get remote.origin.url
#git root dir: canonicalize(git rev-parse --show-cdup)
#git branch: git rev-parse --abbrev-ref HEAD
#git commit count: git rev-list REV.. --count
#git commit date: git show --no-patch --format=%as HEAD
#or git show --no-patch --format=%ad --date=format:'%Y-%m-%d' HEAD
#git commit author name: git show --no-patch --format=%an HEAD
#git commit author mail: git show --no-patch --format=%ce HEAD
#or git log -1 --pretty=format:%ce HEAD
#git commit time: git show --no-patch --format=%ad --date=format:'%H:%M:%S' HEAD
#git short commit id: git rev-parse --short HEAD
#git long commit id: git rev-parse HEAD

# taken from nice tutorial https://learngitbranching.js.org
# git describe <Ref-Name>
# shows
# <tag_name>_<commit_count>_g<hash>
# to show non-annotated tags, use git describe --tags
#
# to select which selected predecessor should be followed with checkout/reset,
# use ^NUMBER, whereas ^ means select the first one, ^2 the second etc
# this also works in conjunction with ~ which selects the number of
# predecessors which should be stepped, for example git reset HEAD~^2~2 one
# step, second branch, two steps

# currently on BRANCH1, now force BRANCH2 point to BRANCH1 quickly via
# git branch -f BRANCH2 BRANCH1

# for faster pushing to same branch, use instead of git fetch && git rebase
# git pull --rebase

# for faster switching + checkout use
# git checkout -b feature commit
# git push remote feature

# TODO https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/
# TODO split commits in arbitrary commit range

# TODO fast and intuitive git log search?
# git log -G 'PxProfilControlGui:'

#====plumbing commands (may break git repo)
#local branch = branch1, git switch branch2 && git reset --hard branch1
#git update-ref refs/heads/branch2 refs/heads/branch1
#better use git branch -f three C2