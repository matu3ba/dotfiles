## Git aliases
# gitlab checkout MR: git mr branch number
# github checkout PR: git fetch upstream pull/ID/head:BRANCHNAME
#
# to fetch all github upstream prs, add to [remote "branch"] in .git/config:
# [remote "upstream"]
# fetch = +refs/pull/*/head:refs/remotes/upstream/pr/*
# gh-resolved = base

# git bare: git clone --bare url reponame
# git switch master
# git worktree add master glibc musl

#restore specific file
#git restore --source=COMMITHASH filename
#git restore -s=COMMITHASH filename
#root directory of current git repo
#git rev-parse --show-toplevel

#overwrite current branch with other branch without losing content
#git tag old-email-branch
#git reset --hard staging

#remove last commit (--soft vs --hard)
#git reset HEAD~1

#patch based work
#git format-patch --stdout first_commit^..last_commit > changes.patch
#git am -3 < changes.patch

# git diff --patch > diff.patch,
# git apply [-R] diff.patch to [reverse] apply it on a codebase
# git diff COMMIT~[NR] COMMIT

#show specific file on revision/commit
#git show REVISION:path/to/file
#$get combined diff
#git show -m
# idea figure out how to make the following scriptable to find successor of 894e8b4e93d8f3
#git log --reverse --ancestry-path 894e8b4e93d8f3^..master | tail -1
#git rev-list --ancestry-path commit1..commit2 | tail -1
#history to specific function of file
#git log -L :function:path/to/file
#git log --name-status --follow -M50% -- pathtofile
#git log -p
#git log -p --stash
#git log --oneline --graph --all

# github referencing: y for current commit URL

#rmgitfilesrecursive
#find . -type d -name ".git" && find . -name ".gitignore" && find . -name ".gitmodules"'

#switch to other branch in bare repo
#git branch -c new
#no within worktree folder/branch folder: fetch + merge

#get untracked files as list for scripting
#git ls-files --others --exclude-standard
#git ls-files --others --exclude-standard || rsync -av --files-from=- /pathfrom /pathto
#get file changes of a commit (-nX with X from HEAD)
alias glogs='git --no-pager log --name-only'
alias gshow='git --no-pager show --name-only'

#change file permission
#git ls-tree HEAD
#add execution bit
#git update-index --chmod=+x script.sh

#get diffed file names by operation(adding,moving etc), lowerspace also works
#git diff COMMIT1 COMMIT2 --name-only --diff-filter=A
#Added, Copied, Deleted, Modified, Renamed + type (T changed9, Unmerged, (X unknown), Broken

# git diff all unindexed files (diff file must be stored outside the git repo)
# alias gdnew="for next in \$( git ls-files --others --exclude-standard ) ; do git --no-pager diff --no-index /dev/null \$next; done;"
#get combined diff of tracked and untracked files (diff file must be stored outside the git repo)
#{ git --no-pager diff; gdnew } > ../all.diff
# TODO: combined diff for fish vs posix shell

#get diffed file to unindexed file
#https://stackoverflow.com/questions/855767/can-i-use-git-diff-on-untracked-files
#git diff --no-index indexed unindexed
#idea get diff between worktrees
#1. git ls-files --others --exclude-standard
#2. loop through list:
#2.1. check if path prefix/unindexed exists
#2.2. if yes, add to list. otherwise add /dev/null
#3. for each listentry:
#3.1. git diff --no-index indexed unindexed
#3.2. add to result string variable
#3.3 print string variable to stdout

#delete untracked files (dry run and real one)
#git clean -d -n
#git clean -d -f

#get the raw files of current commit as tar archive
#git archive -o archive.tar
#tar -xf archive.tar

# git push of data (not deletion etc) require the local branch to have the same
# name as the remote branch or will fail with
#   error: failed to push some refs to 'git@REMOTE:REPO.git'

##### Git config #####
# fix missing remotes:
#   git config remote.downstream.fetch "+refs/heads/*:refs/remotes/downstream/*"
# TODO: fixup moving git repos
# Bare configs .bare/config referenced by file content .git look like this:
# [core]
#   repositoryformatversion = 0
#   filemode = true
#   bare = true
# [remote "downstream"]
#   url = https://github.com/ziglang/zig-bootstrap
#   fetch = +refs/heads/*:refs/remotes/downstream/*
# [branch "master"]
#   remote = downstream
#   merge = refs/heads/master
# Regular repo configs .git/config look like this:
# [core]
#   repositoryformatversion = 0
#   filemode = true
#   bare = false
#   logallrefupdates = true
# [remote "origin"]
#   url = https://github.com/neovim/neovim
#   fetch = +refs/heads/*:refs/remotes/origin/*
# [branch "master"]
#   remote = origin
#   merge = refs/heads/master

alias gwt='git worktree'
alias grst='git restore'
alias g='git'
#ga -A all files, ga . new+modified files, ga -u deleted+modified files
alias ga='git add'
alias gaa='git add -A'
alias gau='git add -u' # add modified files
alias gap='git apply'
alias gapr='git apply -R'

# TODO: switch to fish for multi command completions
alias gb='git branch'
alias gba='git branch -avv'
alias gbd='git branch -d'
alias gbD='git branch -D'
alias gbr='git branch --remote'

alias gfap='git fetch --all --prune'
# git push REMOTENAME --delete deletedBranch
alias gpod='git push downstream --delete'
alias grpo='git remote prune downstream'
alias grv='git remote -v'

# See instructions for bisecting via script in scr/bisect.sh
#alias gbs='git bisect'
#alias gbsb='git bisect bad'
#alias gbsg='git bisect good'
#alias gbsr='git bisect reset'
#alias gbss='git bisect start'

# git checkout commit filepath
alias gco='git checkout'
alias gcch='git config --global credential.helper "cache --timeout=3600"'
alias gc='git commit -v'
alias gcmsg='git commit -m'
alias gca='git commit --amend'
alias gd='git diff'
alias gdn='git diff --name-only'
alias gdc='git diff --cached'
alias gds='git diff --shortstat'
#git diff untracked: git diff untracked file to create/append to a patch
alias gdu='git ls-files --others --exclude-standard -z | xargs -0 -n 1 git --no-pager diff /dev/null'
alias gdfa='git diff --name-only --diff-filter=A'
alias gwch='git whatchanged -p --abbrev-commit --pretty=medium'
alias gcomf='git commit -v --fixup'

alias gf='git fetch'
alias gfd='git fetch downstream'
alias gfu='git fetch upstream'
alias gfrg='git ls-files | rg'

alias grau='git remote add upstream'
alias grad='git remote add downstream'
alias good='git remote rename origin downstream'
alias grsu='git remote set-url'
#git branch -u upstream/master master

#alias gbsum='git branch --set-upstream-to=upstream/master upstream'
alias gpsu='git push --set-upstream downstream $(git branch --show-current)'
alias ghh='git help'
alias grph='git rev-parse HEAD'
alias gbm='git branch --move'

alias gbsudDownMaster='git branch --set-upstream-to=downstream/master downstream'
alias gbsudDownMain='git branch --set-upstream-to=downstream/main downstream'
alias gbsudUpMaster='git branch --set-upstream-to=upstream/master upstream'
alias gbsudUpMain='git branch --set-upstream-to=upstream/main upstream'
alias gscbDown='git branch --set-upstream-to=downstream/$(git branch --show-current)'
alias gscbUp='git branch --set-upstream-to=upstream/$(git branch --show-current)'

alias gsh='git show'
alias gshps='git show --pretty=short --show-signature'
alias gshm='git show -m'
alias gsb='git status -sb'
alias gss='git status -s'
alias gs='git status'
alias gsp='git status --porcelain'
alias gcl='git clone'

alias grbm='git rebase master'
alias grbM='git rebase main'
alias grbi='git rebase -i'
alias grbisq='git rebase -i --autosquash'
# TODO consider switching to fish (supports autocompletion for aliases + abbreviations)
#alias gsw='git switch'
alias gsafe='test -n "$(git status --porcelain)" || echo safe'
alias grbium='git rebase --interactive upstream/master'
alias grbiuM='git rebase --interactive upstream/main'
alias grmdel='git rm $(git ls-files --deleted)'

alias gignore='git update-index --assume-unchanged'
alias gignored='git ls-files -v | grep "^[[:lower:]]"'

alias gk='gitk --all --branches'
alias gke='gitk --all $(git log -g --pretty=%h)'

alias gur='git pull --rebase'
alias gu='git pull --no-rebase --ff-only'
alias glgs='git log -S' # git log search 'regex' -- file
#git log --grep|--invert-grep
#git grep 'regexp' $(git rev-list --all)

alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glo='git log --oneline --decorate'
alias gloga='git log --oneline --decorate --graph --all'
alias glogp="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias glp='_git_log_prettily'

alias glsm='git ls-files -m' # modified
alias glss='git ls-files -s' # staged
alias glsa='git ls-files -mo --exclude-standard' # all non ignored

alias gm='git merge --ff-only'
#alias gmf='git merge --ff-only'
alias gmom='git merge downstream/master'
alias gmt='git mergetool --no-prompt'
alias gmtvim='git mergetool --no-prompt --tool=vimdiff'
alias gmum='git merge upstream/master'
alias gma='git merge --abort'

alias gp='git push'
alias gpdry='git push --dry-run'
alias gpf='git push --force'

# To show the content of a stash run
# git stash show -p STASH/STASHNUMBER
#alias gsta='git stash'
alias gstu='git stash push'
alias gsto='git stash pop'
#alias gstaa='git stash apply'
#alias gstac='git stash clear'
#alias gstad='git stash drop'
#alias gstal='git stash list'
#alias gstapop='git stash pop'
#alias gstas='git stash show --text'
#alias gstaall='git stash --all'
alias gssa='git stash show --all'
alias gsap0='git stash apply stash@{0}'

alias gsi='git submodule init'
alias gsu='git submodule update'
