Online correctness validation of transformations:
https://alive2.llvm.org/ce/

Instructions to bring up cmake and llvm on very old systems with cmake.
Note: Using `-DLLVM_ENABLE_PROJECTS="all" \` might break, so use minimal necessary output.
libc and compiler-rt are other common options, but also not necessary.

```sh
mkdir -p "$HOME/dev/git/cpp" && cd "$HOME/dev/git/cpp"
git clone https://github.com/Kitware/CMake
cd CMake && mkdir build && cd build && cmake .. -GNinja && ninja
```

```sh
#!/usr/bin/env sh
# simple llvm build recipe with workarounds in case of memory limitations
#git clone --depth=1 https://github.com/llvm/llvm-project
#git fetch
#git tag
#git checkout TAG
set -e

echo "bootstrap clang"
mkdir -p build-relbs && cd build-relbs
PATH="$HOME/dev/git/cpp/CMake/build/bin:$PATH"
CC=clang-12
CXX=clang++-12
cmake ../llvm \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_CXX_COMPILER=$CXX \
  -DCMAKE_C_COMPILER=$CC \
  -DCMAKE_INSTALL_PREFIX=$HOME/.local/llvmbs \
  -DLLVM_CCACHE_BUILD=ON \
  -DLLVM_ENABLE_ASSERTIONS=ON \
  -DLLVM_ENABLE_LIBEDIT=OFF \
  -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF \
  -DLLVM_TOOL_LLVM_LTO_BUILD=OFF \
  -DLLVM_TOOL_LTO_BUILD=OFF \
  -DLLVM_ENABLE_LIBXML2=OFF \
  -DLLVM_ENABLE_PROJECTS="lld;lldb;clang;clang-tools-extra" \
  -DLLVM_ENABLE_TERMINFO=OFF \
  -DLLVM_PARALLEL_LINK_JOBS=1 \
  -DLLVM_USE_LINKER=lld \
  -G Ninja
cmake --build . --target install
# alternative: ninja install -j 4

# Prevent C++ abi mismatches ('c++ compiler != llvm c++ libs') from $DCMAKE_INSTALL_PREFIX
echo "building clang with clang"
CC=$HOME/.local/llvmbs/bin/clang
CXX=$HOME/.local/llvmbs/bin/clang++
cd ../
mkdir -p build-release && cd build-release
mkdir build-relbs
cd build-relbs
cmake ../llvm \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_CXX_COMPILER=$CXX \
  -DCMAKE_C_COMPILER=$CC \
  -DCMAKE_INSTALL_PREFIX=$HOME/.local/llvm \
  -DLLVM_CCACHE_BUILD=ON \
  -DLLVM_ENABLE_ASSERTIONS=ON \
  -DLLVM_ENABLE_LIBEDIT=OFF \
  -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF \
  -DLLVM_TOOL_LLVM_LTO_BUILD=OFF \
  -DLLVM_TOOL_LTO_BUILD=OFF \
  -DLLVM_ENABLE_LIBXML2=OFF \
  -DLLVM_ENABLE_PROJECTS="lld;lldb;clang;clang-tools-extra" \
  -DLLVM_ENABLE_TERMINFO=OFF \
  -DLLVM_PARALLEL_LINK_JOBS=1 \
  -DLLVM_USE_LINKER=lld \
  -G Ninja
cmake --build . --target install
```

If the INSTALL_PREFIX has been forgotten, use
```
cmake -DCMAKE_INSTALL_PREFIX=/tmp/llvm -P cmake_install.cmake
mv /tmp/llvm $HOME/.local/llvm[bs]
```

TODO runtime instrumentation for tracing / logging.

SHENNANIGAN
1. Rewrite
- 1.1 Pointer semantics (same applies for C)
- 1.2 Memory synchronization semantics (same applies for C)
- Justifications:
  * based on paper "RVSDG: An Intermediate Representation for Optimizing Compilers"
  * 1. LLVM IR requires frequent normalization into SSA form, which looks like it
    eats up any performance advantage over the more general graph form
    + optimizations are always destructive due to normalization
      xor would have unfeasible storage overhead
  * 2. Tracing optimizations and writing validation code along IR requires an
    own tracing system per optimization instead of using graph representation
  * 3. Powerful rr reverse execution for debugging and testing

SHENNANIGAN
llvm lto takes painfully much memory (>15GB with gcc linker, docs mention up to 15GB with lld)
* Make sure to use
```
  -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF \
  -DLLVM_TOOL_LLVM_LTO_BUILD=OFF \
  -DLLVM_TOOL_LTO_BUILD=OFF \
```

SHENNANIGAN
https://stackoverflow.com/questions/11485531/what-exactly-phi-instruction-does-and-how-to-use-it-in-llvm
https://mlir.llvm.org/docs/Rationale/Rationale/#block-arguments-vs-phi-nodes

ARM for Windows setup
https://www.linaro.org/blog/how-to-set-up-windows-on-arm-for-llvm-development/

Known to work configuration without missing target llvm-lto2:
```sh
cmake "../llvm" \
  -DCMAKE_INSTALL_PREFIX="$HOME/.local/llvmbs" \
  -DCMAKE_PREFIX_PATH="$HOME/.local/llvmbs" \
  -DCMAKE_BUILD_TYPE=Release \
  -DLLVM_ENABLE_ASSERTIONS=ON \
  -DLLVM_ENABLE_PROJECTS="lld;clang" \
  -DLLVM_ENABLE_LIBXML2=OFF \
  -DLLVM_ENABLE_ZSTD=OFF \
  -DLLVM_INCLUDE_UTILS=OFF \
  -DLLVM_INCLUDE_TESTS=OFF \
  -DLLVM_INCLUDE_EXAMPLES=OFF \
  -DLLVM_INCLUDE_BENCHMARKS=OFF \
  -DLLVM_INCLUDE_DOCS=OFF \
  -DLLVM_ENABLE_BINDINGS=OFF \
  -DLLVM_ENABLE_OCAMLDOC=OFF \
  -DLLVM_ENABLE_Z3_SOLVER=OFF \
  -DLLVM_PARALLEL_LINK_JOBS=1 \
  -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF \
  -DLLVM_TOOL_LLVM_LTO_BUILD=OFF \
  -DLLVM_TOOL_LTO_BUILD=OFF \
  -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF \
  -DCLANG_BUILD_TOOLS=OFF \
  -DCLANG_INCLUDE_DOCS=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF \
  -DCLANG_TOOL_CLANG_LINKER_WRAPPER_BUILD=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \
  -DCLANG_TOOL_LIBCLANG_BUILD=OFF
cmake --build . --target install
```

vswhere
Configuration example for Windows batch script:

SHENNANIGAN
Standalone builds mandate a download of the 'cmakeXYZ.tar.tz', which needs to
be renamed to 'cmake'. However, building lld still requires a patch due to missing
macho headers from libunwind. For some reason this breaks every major LLVM release,
because it appears this is not tested in the release process.

echo "building llvm, clang, lld, lldb and tooling (clangd, clang-tidy etc).."
REM https://llvm.org/docs/GettingStarted.html#getting-the-source-code-and-building-llvm
REM Consider using set PATH=%HOMEPATH%/dev/git/cpp/CMake/build/bin;%PATH%"
REM Build LLVM and a bunch of projects
REM Cmake uses always forward slash
REM * This works, but for some reason does not include clangd binary
REM * CMAKE_INSTALL_PREFIX defaults to c:/Program Files on windows
REM * The install step on Windows appears to be broken in release 17.0.4 (--target install)
REM * -DCMAKE_INSTALL_PREFIX="%HOMEPATH%/.local/llvmbs" ^
REM * -DCMAKE_PREFIX_PATH="%HOMEPATH%/.local/llvmbs" ^
REM * -DCMAKE_C_COMPILER="%VS2017%/bin/HostX64/x64/cl.exe" ^
REM * -DCMAKE_CXX_COMPILER="%VS2017%/bin/HostX64/x64/cl.exe" ^
REM * -DCMAKE_LINKER="%VS2017%/bin/HostX64/x64/link.exe" ^
set JOBS_ARG=
mkdir "build-release"
if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
cd "build-release"
if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
cmake "..\llvm" ^
  -G "Ninja" ^
  -DCMAKE_BUILD_TYPE=Release ^
  -DLLVM_ENABLE_PROJECTS=""clang;clang-tools-extra;lld;lldb" ^
  -DLLVM_ENABLE_LIBXML2=OFF ^
  -DLLVM_ENABLE_ZSTD=OFF ^
  -DLLVM_INCLUDE_UTILS=OFF ^
  -DLLVM_INCLUDE_TESTS=OFF ^
  -DLLVM_INCLUDE_EXAMPLES=OFF ^
  -DLLVM_INCLUDE_BENCHMARKS=OFF ^
  -DLLVM_INCLUDE_DOCS=OFF ^
  -DLLVM_ENABLE_BINDINGS=OFF ^
  -DLLVM_ENABLE_OCAMLDOC=OFF ^
  -DLLVM_ENABLE_Z3_SOLVER=OFF ^
  -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF ^
  -DLLVM_TOOL_LLVM_LTO_BUILD=OFF ^
  -DLLVM_TOOL_LTO_BUILD=OFF ^
  -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF ^
  -DCLANG_BUILD_TOOLS=OFF ^
  -DCLANG_INCLUDE_DOCS=OFF ^
  -DLLVM_INCLUDE_DOCS=OFF ^
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF ^
  -DCLANG_TOOL_CLANG_LINKER_WRAPPER_BUILD=OFF ^
  -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF ^
  -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF ^
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF ^
  -DCLANG_TOOL_LIBCLANG_BUILD=OFF ^
  -DLLVM_USE_CRT_RELEASE=MT ^
  -DLLVM_BUILD_LLVM_C_DYLIB=NO
if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
cmake --build . %JOBS_ARG% --target install
if %ERRORLEVEL% neq 0 exit /b %ERRORLEVEL%
