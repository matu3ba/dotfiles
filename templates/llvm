Instructions to bring up cmake and llvm on very old systems with cmake.
Note: Using `-DLLVM_ENABLE_PROJECTS="all" \` might break, so use minimal necessary output.
libc and compiler-rt are other common options, but also not necessary.

```sh
mkdir -p "$HOME/dev/git/cpp" && cd "$HOME/dev/git/cpp"
git clone https://github.com/Kitware/CMake
cd CMake && mkdir build && cd build && cmake .. -GNinja && ninja
```

```sh
#!/usr/bin/env sh
# simple llvm build recipe
#git clone --depth=1 https://github.com/llvm/llvm-project
#git fetch
#git tag
#git checkout TAG
set -e

mkdir build-release
cd build-release
PATH="$HOME/dev/git/cpp/CMake/build/bin:$PATH"
CC=clang-12
CXX=clang++-12
cmake ../llvm \
  -DCMAKE_INSTALL_PREFIX=$HOME/.local/llvm \
  -DCMAKE_BUILD_TYPE=Release \
  -DLLVM_ENABLE_PROJECTS="lld;lldb;clang;clang-tools-extra" \
  -DLLVM_ENABLE_LIBXML2=OFF \
  -DLLVM_ENABLE_TERMINFO=OFF \
  -DLLVM_ENABLE_LIBEDIT=OFF \
  -DLLVM_ENABLE_ASSERTIONS=ON \
  -DLLVM_PARALLEL_LINK_JOBS=1 \
  -DCMAKE_CXX_COMPILER=$CXX \
  -DCMAKE_C_COMPILER=$CC \
  -G Ninja
ninja install
```

If the INSTALL_PREFIX has been forgotten, use
```
cmake -DCMAKE_INSTALL_PREFIX=/tmp/llvm -P cmake_install.cmake
mv /tmp/llvm $HOME/.local/llvmXX_rel
```

TODO runtime instrumentation for tracing / logging.

SHENNANIGANS
1. Rewrite
- 1.1 Pointer semantics (same applies for C)
- 1.2 Memory synchronization semantics (same applies for C)
- Justifications:
  * based on paper "RVSDG: An Intermediate Representation for Optimizing Compilers"
  * 1. LLVM IR requires frequent normalization into SSA form, which looks like it
    eats up any performance advantage over the more general graph form
  * 2. Tracing optimizations and writing validation code along IR requires an
    own tracing system per optimization instead of using graph representation
