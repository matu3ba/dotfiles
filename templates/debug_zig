====possibilities
* comptime
* build system
* fuzzing
* interactive test generation
* mapping API<->ABI<->docs


--verbose-cimport
--verbose-air
--verbose-llvm-ir
--verbose-link
--verbose-cc
--verbose-llvm-cpu-features


and the clang flags, if needed.

As I understand it, this is a regression.
I'd use this strategy (probably try 1+2 first) to identify the cause unless the problem does not reproduce in Debug builds:
- 1. bisect the compiler via bisecting script (consider grepping for errors to rule out false positives https://github.com/matu3ba/dotfiles/blob/master/scr/bisect.sh)
- 2. Quickly grasp at compiler logs for sema to look for hints (what kind of functions are recursively called):
```
# Zig
# Major "--debug-log" targets are: compilation, module, sema, codegen, and link
# requires debug mode or to set -Dlog=true on compiling Zig
```
- 3. minimize the problem by deleting all unnecessary code starting with functions, then globals, then all statements (if its in a bigger structure and not in 1 comptime function/block)
- 4. Use rr or timetravel debugging on windows to step through the compiler
  * Try tracing all function calls in gdb via https://gist.github.com/quark-zju/a20ae638601d2fac476e or the lldb one to get the big picture
  * step through interesting bits
  * report your findings + scripts how to reproduce them

zig build-exe -femit-llvm-ir=bad.ll
llc -filetype=asm bad.ll -o bad_ll.s
objdump -dxS -Mintel bad_ll.s &> badecodegen_ll_s.dump

dense assembly of function via grep? objdump?

* qemu-system-avr available
* qemu-avr programs is not available