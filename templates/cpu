CPU functionality and assembly below caches

#### CPU functionality
- AMD Zen dont have a single physical location where each register lives
- AMD Zen use a Register File (RF) and a Register Allocation Table (RAT)
- during vzeroupper the zero bit is set, but rolled back on branch-misprediction causing use-after-free
- RF is shared by everything on the same physical core (including hyperthreads)

Good fuzzing techniques based on https://lock.cmpxchg8b.com/zenbleed.html:
- performance counters
- reverse execution
- oracles from test CPU, ie within simulator
- reset instruction level parallelism
- generate random program and automatically transform it into a serialized one:
```asm
movnti [rbp+0x0],ebx  movnti [rbp+0x0],ebx
                      sfence
rcr dh,1              rcr dh,1
                      lfence
sub r10, rax          sub r10, rax
                      mfence
rol rbx, cl           rol rbx, cl
                      nop
xor edi,[rbp-0x57]    xor edi,[rbp-0x57]
```

#### Assembly
- Integer operations are usually faster than the same-sized float number
- Integer division is slower than the respective float due to higher precision
- There are no SIMD routines for integer division
  * one can use conversion to float instead
  * most of the time one can workaround division

Practical assembly usage https://wiki.gentoo.org/wiki/Hardened/Textrels_Guide

'ForwardCom: An open-standard instruction set for high-performance microprocessors'
by Agner Fog el al. for non-embedded systems with some interesting ideas:
https://lock.cmpxchg8b.com/zenbleed.html
* 1. designed for non-embedded systems (instructions are typically bigger)
* 2. pic on default => code and data can be relocated independently from another
* 3. no global status flags or status register
* 4. can store constant data in instruction codes
* 5. no microcode
* 6. Function libraries instead of static/dynamic libs usable for both
* 7. calculate the required stack size (non recursive)
  + TODO
* 8. simpler memory management + reduces fragmentation as side effect
  + TODO
* 9. (optimal) register allocation across program modules and function libraries
  + TODO
* 10. strong security features
  + TODO
* 11. standards to establish compatibility between different programming languages and different platforms???
  + TODO
* 12. vector register of variable len
  + TODO
* 13. atomics and cache synchronization???
TODO include feedback from https://github.com/ForwardCom/manual/issues/29

RISC5 looks ideal for embedded systems, where instructions are typically smaller
(addresses, constants, etc).
It even has an instruction for flushing the complete cache + clear internal state.

Interesting ideas
'Efficient virtual cache coherency for multicore systems and accelerators' by Xuan Guo
* TODO
