Mostly taken from https://klarasystems.com/articles/freebsd-vs-linux-tracing-and-troubleshooting/
From portable and widely used to non-portable

==dtrace
idea: document, if necessary

==strace in a nutshell
strace<--2.ptrace  traced process
   |     \------+          |1.open(file.txt)   user
---|------------|----------|-------
    \3.ptrace   \2.ptrace  |                   kernel
     \           --------->|
      ---------------------|
                           |
                     disk<-+

=> slow due to many context switches, but standard tool due to decoding huge
number syscalls and platform support

==bpftrace
https://github.com/iovisor/bpftrace
- inspired by awk, C and predecessors dtrace and systemtrap
- for eBPF on Linux, uses LLVM to compile into BPF-bytecode,
- uses BCC to interact with BPF system, kprobes, uprobes and tracepoints

==Performance analysis profiler

"Coz: Causal Profiling"
https://github.com/plasma-umass/coz
* TODO explain advantage

"Dthreads: efficient deterministic multithreading"
https://github.com/emeryberger/dthreads
* usage of processes with ipc instead of threads to enforece determinism
* TODO explain tradeoffs

https://www.brendangregg.com/blog/2024-03-17/the-return-of-the-frame-pointers.html
TODO summary on what to use
* keep frame pointers and pay <1% perf penalty to have proper stack traces for
  performance analysis
* LBR?
* TODO

==FAQ
Linux strace ./callstuff
Darwin/Mac sudo ktrace trace -S -f C3 -c find .
sudo dtrace -ln 'syscall:::entry'
Windows

Excellent dtrace introduction example:
https://zinascii.com/2023/debugging-a-zig-test-failure.html

Checkpoint/Restore In Userspace (CRIU) https://criu.org/Main_Page meaning serialization+deserialization
of complete program states (to/from memory or fs)
https://unix.stackexchange.com/questions/721525/is-it-possible-to-serialize-a-running-programs-memory-image-to-disk-instead-of
requiring clients to submit their state when requested and giving the state
back on restore clients can serialise and deserialise state, supervisor
provides events to respond
requires external state being the same or loss of state at least being recoverable
* files opened by the program being "frozen" or not having changed
* sockets being there
* rules out X11
* makes things hard for curses/graphical tty
* common in conzainerized workloads (fs private, network commonly lost)