====dataflow_systems
====distributed_double_accounting_databases
====query_compilation
====relational_database
====replication
====usability
====vector_databases
====performance

====dataflow_systems
* aqualang as language designed to be compositional, safe, fast, easy to use
  - uses equality saturation for optimizations

====distributed_double_accounting_databases
tigerbeetle

====query_compilation
Database query compilation: our journey Thomas Neumann & Viktor Leis
* trade-offs on query execution

====relational_database
* structured query language (sql)
  - bigquery, zetasql, etc (pipe syntax for composability)
  - prql (pipelined relational query language) as "modern sql replacement" for composability
    o transforms, orthogonalisms, invariants, few primitives, fns, ergonomics
    o clickhouse, duckdb, glaredb, mysql, postgres, sqlite, ansi, bigqueue, mssql, snowflake
* performance tuning
  - reduce table size
  - simplify and omit if possible joins
  - (postgresql) to get runtime of query prefix it with EXPLAIN
  - TODO many more things
* https://dikmenonur.medium.com/sql-performance-tuning-a-comprehensive-guide-0e8a0b0b8aa9

====replication
"Enough with all the Raft" by Alex Miller
* Blob Storage
* Quorum
* Raft
* Reconfiguration

====usability_shortcomings
"DB usability as if" by Jonathan Edwards
* displaying relationships
* interactive schema evolution (DSLs in research, but no interactivity)
* version control for data and schema

====vector_databases
https://grski.pl/vdb

unclear use cases of http://www.logicblox.com/learn.html

====performance
data bases restrict data flexibility (ie opc-ua) for better perf + synced storage
* ACID
* BASE/non-ACID (dont care that data is trustable) like get latest value asap
TODO
