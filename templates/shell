Purpose
Shell is a convenience cli and arbitrary complex scripting glue for
4 main goals:
- 1. piping
- 2. basic text processing
- 3. basic job control
- 4. path hackery.

There is a complete wiki dedicated to the weird quirks of bash:
https://wiki.bash-hackers.org/syntax/expansion/brace

SHENNANIGAN
- 1. brace expansion does only work on standalone variables:
  * "{1..3}" does not work, but {1..3} works
  * workaround for using in variables: `eval {$a..$b}`
  * workaround in for loops `for i in $(eval echo {$a..$b})`

SHENNANIGAN process spawning
- There is no standard way to signal a process is initialized to the parent process
- Shell has only quirky signaling ways: (named) pipe, (temp) file
  * Example: 'stty -F /dev/ttyS0 min 0 time 10 &' takes time to spawn

  > Yes, but why is this characterized as something negative?

SHENNANIGAN
Shells are not properly supported in any OS except plan9, since
- 1. the OS provides no enforcement or convention of CLI API interface (there
     is no enforced encoding standard or checkable stuff),
- 2. the OS provides no rules for file names to be shell-friendly and
- 3. there are no dedicated communication channels towards shells or in between
     programs and shells.
Thus, shells remain a hack around the system that is "simple to implement the
initials" and is annoying to use and write at many corner cases.

SHENNANIGAN
Escape unusual characters for usage, ie as shell variables:
find . -exec printf "%q\n" {} \;
find . -path RELPATH -exec printf "%q\n" {} \;
Note: This is very slow.

Move file names by pattern from https://stackoverflow.com/a/40029320/9306292:
- '-n' to suppress echoing of sed
- use '& ' to interpolate the entire matching string, followed by a space character
  and '\1service' to interpolate before the first matching
- 'p' to print input and output
find . -type f |
sed -n "s/\(.*\)factory.*$/& \1service\.py/p" |
xargs -p -n 2 mv
Example:
foo_factory.py foo_service.py
bar_factory.py bar_service.py
Other example:
find . -type f |
sed -n "s/\(.*\)Ether.*$/& \1Twin\.py/p" |
xargs -p -n 2 mv

SHENNANIGAN find
only supports '-path RELATIVEPATH' forcing more typing

SHENNANGIAN
"Weaponizing Plain Text: ANSI Escape Sequences as a Forensic Nightmare" STÃ–K, Hacker
TODO summarize solutions
https://forum.defcon.org/node/245741
https://forum.defcon.org/node/245748
Many people poked https://www.cyberark.com/resources/threat-research-blog/dont-trust-this-title-abusing-terminal-emulators-with-ansi-escape-characters
https://unix.stackexchange.com/questions/15101/how-to-avoid-escape-sequence-attacks-in-terminals

zutty
Incomplete implementation https://tomscii.sig7.se/2020/11/How-Zutty-works

List of terminal escape codes
https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797.

SHENNANIGAN
mosh can drop data and has no history, ssh is not designed for performance

SHENNANIGAN
1. C-[0-9], C-[F1-F12] etc are not mappable without kitty keymap protocol
2. kitty does not support remote session persistence and maintainer is hostile
to terminal multiplexers.
Following solutions are possible to support all keys being mappable and remote
session persistence:
- 1. define a new public protocol ("extended kitty")
- 2. use a private one to other ghostty sessions like wezterm
- 3. use a separate communication channel other than shell (https://goteleport.com/blog/ssh-restricted-shells/)

SHENNANGIAN
Terminfo data base: infocmp
Currently used storage paths: infocmp -D
Copy terminfo to remote:
infocmp -a xterm-kitty | ssh myserver tic -x -o \~/.terminfo /dev/stdin
infocmp -a xterm-ghostty | ssh myserver tic -x -o \~/.terminfo /dev/stdin

List process infos from spawned processes in shell:
ps -o pid,ppid,cmd,pgid
List all processes with pgid:
ps ax -O pgid