### qemu_embedded ###
General steps:
- 1. linker script to define memory layout for correct placement of _start
     * (vectors with) hardware interrupt table + routines to execute in hardware interrupt table
     * noinit for persistent data between reboots (RAM)
     * text (program code), rodata (ro-data like strings) [usually in flash]
     * data (rw-data, initialized), bss (rw-data uninitialized, typically zerod out),
     * heap section (stack grows from top to bottem, heap from bottom to top)
- 2. _start:
     * bss zeroing
     * stack setup
     * calling _main
- 3. _main
     * setup periphery (requires simulation support [in qemu])
     * store periphery state (requires ..)
     * event loop / OS etc (periphery requires ..)

1 is horrible and 2 would be doable without 1:
```ld
/* Stolen from https://github.com/rbino/zig-stm32-blink/blob/master/src/linker.ld */
/* Linker script for ST STM32F4DISCOVERY (STM32F407VG, 1024K flash, 128K RAM,
 * 64K Core Coupled Memory RAM).
 */

/* Define memory regions. */
MEMORY
{
  rom (rx) : ORIGIN = 0x08000000, LENGTH = 1024K
  ram (rwx) : ORIGIN = 0x20000000, LENGTH = 128K
  ccm (rwx) : ORIGIN = 0x10000000, LENGTH = 64K
}

/* Enforce emmition of the vector table. */
EXTERN (vector_table)

/* Define the entry point of the output file. */
ENTRY(resetHandler)

/* This provide weak linking to empty handlers, which can be overridden */
PROVIDE(nmiHandler = nullHandler);
PROVIDE(hardFaultHandler = blockingHandler);
PROVIDE(memoryManagementFaultHandler = blockingHandler);
PROVIDE(busFaultHandler = blockingHandler);
PROVIDE(usageFaultHandler = blockingHandler);
PROVIDE(svCallHandler = nullHandler);
PROVIDE(debugMonitorHandler = nullHandler);
PROVIDE(pendSVHandler = nullHandler);
PROVIDE(sysTickHandler = nullHandler);

/* Define sections. */
SECTIONS
{
  .text : {
    *(.vectors)  /* Vector table */
    *(.text*)  /* Program code */
    . = ALIGN(4);
    *(.rodata*)  /* Read-only data */
    . = ALIGN(4);
  } >rom

  /* C++ Static constructors/destructors, also used for __attribute__
   * ((constructor)) and the likes */
  .preinit_array : {
    . = ALIGN(4);
    __preinit_array_start = .;
    KEEP (*(.preinit_array))
    __preinit_array_end = .;
  } >rom
  .init_array : {
    . = ALIGN(4);
    __init_array_start = .;
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array))
    __init_array_end = .;
  } >rom
  .fini_array : {
    . = ALIGN(4);
    __fini_array_start = .;
    KEEP (*(.fini_array))
    KEEP (*(SORT(.fini_array.*)))
    __fini_array_end = .;
  } >rom

  /*
   * Another section used by C++ stuff, appears when using newlib with
   * 64bit (long long) printf support
   */
  .ARM.extab : {
    *(.ARM.extab*)
  } >rom
  .ARM.exidx : {
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
  } >rom

  . = ALIGN(4);
  _etext = .;

  /* ram, but not cleared on reset, eg boot/app comms */
  .noinit (NOLOAD) : {
    *(.noinit*)
  } >ram
  . = ALIGN(4);

  .data : {
    _data = .;
    *(.data*)  /* Read-write initialized data */
    *(.ramtext*)    /* "text" functions to run in ram */
    . = ALIGN(4);
    _edata = .;
  } >ram AT >rom
  _data_loadaddr = LOADADDR(.data);

  .bss : {
    _bss = .;
    *(.bss*)  /* Read-write zero initialized data */
    *(COMMON)
    . = ALIGN(4);
    _ebss = .;
  } >ram

  /*
   * The .eh_frame section appears to be used for C++ exception handling.
   * You may need to fix this if you're using C++.
   */
  /DISCARD/ : { *(.eh_frame) }

  . = ALIGN(4);
  end = .;
}

PROVIDE(_stack = ORIGIN(ram) + LENGTH(ram));
```

State of art is that there is nothing more general non-proprietary
https://stackoverflow.com/questions/6507190/linker-script-generator and each
vendor has its own solution https://github.com/sifive/ldscript-generator

TODO: Write Zig library doing 1+2 sane defaults from hardware description +
adjust by user data.
