https://reproducible-builds.org/tools/
in-depth comparison of files, archives and dirs: diffoscope - https://diffoscope.org/
rebuilderd - https://github.com/kpcyrd/rebuilderd
comby - https://github.com/comby-tools/comby
see https://comby.dev/blog/2021/03/26/comby-reducer
https://comby.dev/en/projects
https://comby.dev/blog/
cal - coreutils, unxutils, or uutils-coreutils

fd-find from sharkdp https://github.com/sharkdp/fd
fz from natecraddock https://github.com/natecraddock/zf
jfind from jake-stewart https://github.com/jake-stewart/jfind
qemu on iOS and macOS: https://github.com/utmapp/UTM
reverse engineering:
* https://rada.re/n/
* static analysis via ghidra => correct, details, without breakpoints
* dynamic analysis via debugger + JTAG => correct, checking assumptions, limited breakpoints
* dynamic analysis in emulator (usually qemu fork for hardware) => may be wrong, general direction, unlimited breakpoitns
ripgrep from BurntSushi https://github.com/BurntSushi/ripgrep
rr - https://github.com/rr-debugger/rr
* https://github.com/sidkshatriya/me/blob/master/008-rr-everywhere.md
znvim from LordMZTE https://mzte.de/git/LordMZTE/znvim (glpv3)
zellij: s-e (scrollback-edit)
yazi as file manager https://github.com/sxyazi/yazi
flow control editor https://github.com/neurocyte/flow
typos-cli typo https://github.com/crate-ci/typos
(faster than spellcheck)

build system respecting unused files and detect parallel-unsafe build description (db can become huge): tup
shell: fish, crush-shell
terminal: contour, ghostty
editors: neovim[more plugins], vim[stable+no surprises], helix[lazy setup, few plugins], kakoune
tracy -- frame tracer and visualizer
Continuous profiling via typescript frontend parca https://github.com/parca-dev/parca
hex and reverse engineering editor: imhex https://github.com/WerWolv/ImHex
simple diffs for dirs, files, version control: https://meld.app/

TUI API client - https://github.com/darrenburns/posting

fdupes or fork jdupes - finding duplicates
fdupes -qdN -r /ops/backup/

xpack for windows reproducible build framework (https://xpack.github.io/)
rizin - reverse engineering and debugging
qiling - binary emulation framework https://github.com/qilingframework/qiling
grafana - visualization
windirstat for directory overview - https://windirstat.net/

browser firefox, ladybird
browser with vim keybindings lynx, qutebrowser?

xml parser: yxml https://code.blicky.net/yorhel/yxml
disk usage explorer: ncdu https://code.blicky.net/yorhel/ncdu or KDE filelight
simple header testing framework: utest.h https://github.com/sheredom/utest.h
github workflow/action validation: https://github.com/mpalmer/action-validator

proprietary
- whitebox - program execution tracer and visualizer
  * known to handle project sizes up to doom, excellent to prototype algorithms
- https://www.lauterbach.com/ trace32 tools + hardware for reversible execution
  on embedded devices looks like longest running 'not academic exercise'
  omniscient debugger

- valgrind
* cachegrind: cache profiler
* callgrind: cachegrind + call graphs
* massif: heap profiler (massif-visualizer as graphical frontend)
* helgrind: race condition finder
* DRD: like helgrind, but uses less memory
* Lackey/None: demo/unit test of valgrind itself

C/C++
-- clang --
scan-build
clang-fmt
clang-tidy
flags compile-time: -Wthread-safety
frama-c

====sanitizer

https://developers.redhat.com/blog/2021/05/05/memory-error-checking-in-c-and-c-comparing-sanitizers-and-valgrind
clang -g -fsanitize=address foo.c
gcc -g -fsanitize=address -static-libasan foo.c
>slowdown by 2x-4x ASAN vs 20x-50x valgrind 10.000x gdb
>different types of errors
>TSAN 9x sanitizer - 404x valgrind slowdown
>slowdown with rr is <=1.2x but only runnable on single core
>"Vidi: Record Replay for Reconfigurable Hardware" looks ok,
>but there is nothing easily [re]usable yet.

https://stackoverflow.com/questions/7410160/alternative-to-valgrind-memcheck-for-finding-leaks-on-linux.
Perf tools and bcc have samplers, which might be what you are looking for, if
you work solely on Linux.

(false positives with fortification)
__attribute__((no_sanitize_address))

clang -fsanitize=address,undefined a.c
clang -fsanitize=fuzzer,undefined -fno-sanitize-recover a.c
clang -fsanitize=hwaddress,undefined a.c
clang -fsanitize=memory,undefined a.c
clang -fsanitize=thread,undefined a.c
clang -fsanitize=cfi,undefined -flto -fvisibility=hidden a.c
clang -fsanitize=type

-D_FORTIFIY_SOURCE={0,1,2}
adds checks to memory, copy printf functions
-D_FORTIFIY_SOURCE=2
default on many modern distros

ftrace
cat /sys/kernel/debug/tracing/trace
trace-cmd record -e tcp:tcp_destroy_sock
trace-cmd report

ltrace (dynamic library calls of process)
ltrace cmd
ltrace -w=4 cmd
ltrace -t cmd
ltrace -l libc.so* c
ltrace -e malloc+free-@libc.so* cmd

To get an overview: sudo tiptop

perf trace
perf trace cmd
perf trace -p 1234
perf trace -e read*
perf trace -D 500
perf trace record
perf script
perf report

linux perf, windows etw, macos kperf c api usage
https://gist.github.com/mmozeiko/bd5923bcd9d20b5b9946691932ec95fa?ts=4
macos only, no cli and gui yet
https://gist.github.com/ibireme/173517c208c7dc333ba962c1f0d67d12

gdb
record btrace

after core dump:
ls -ltm core*
gdb -c core.NUM
bt

gdb ./exec
record
break main
command 1
>record
>continue
>end
break exit
command 2
run
end
set pagination off
set confirm off
c

gdb ./exec
bt
reverse-stepi
disas
print $rsp
x $1
print /x * (unsigned long*) $sp
disas (printed thing)
x (disassembled thing)

            Linux tracing overview
___________________________________________________________________
addons+viewers           | trace_cmd, perf-tools, LTTng, kerneshark
front-end tools          | perf
tracing frameworks       | ftrace, perf_event, eBPF
Back-end instrumentation | tracepoints, kprobes, uprobes
source: https://wiki.st.com/stm32mpu/wiki/Linux_tracing,_monitoring_and_debugging
bpf-based
* https://github.com/grafana/beyla
* https://github.com/gojue/ecapture https://docs.kubeshark.co/en/encrypted_traffic

Embedded (multi-partition swapping)
https://sbabic.github.io/swupdate/swupdate.html

Non-programming tools:
naps2 as graphical scanner app
