Typical .gitattributes setting:
*.zig text eol=lf
*.h text eol=lf
*.c text eol=lf
*.cpp text eol=lf
*.txt text eol=lf
data/binary_data/** binary
lib/include/** linguist-vendored

https://git-scm.com/docs/gitattributes/2.21.0
* git stores data internally (reencodes on checkout into desired format) as
  - utf8 without bom
  - LF
* explicit setting eol forces normalization and converts or prevents conversion
* defaulting to crlf for new files without forcing changes on existing files:
[core]
  autocrlf = true
* remove bom + reformat via: iconv -f UTF-16 -t UTF-8 utf16lebom.cpp > utf8.cpp

Best practice:
Annotate all deviating files from norm and use for norm 1. encoding and 2. eol.

https://git-scm.com/docs/gitfaq
"Whatâ€™s the recommended way to store files in Git?"
    "While Git can store and handle any file of any type, there are some
    settings that work better than others. In general, we recommend that text
    files be stored in UTF-8 without a byte-order mark (BOM) with LF
    (Unix-style) endings. We also recommend the use of UTF-8 (again, without
    BOM) in commit messages. These are the settings that work best across
    platforms and with tools such as git diff and git merge."

Iterate through all files and print files without utf8 encoding:
git ls-files '*.[h|c]' '*.cpp' | xargs -n1 file > formats

====eol
Renormalize (existing) files
echo "* text=auto" > .gitattributes
git add --renormalize .
git status                  # Show files that will be normalized
git commit -m "Introduce end-of-line normalization"

====diff
1. Installling a tool to read binary files and output text files
  * pandoc, pdftotext, pdftostdout
2. Add conversion handlers to git
git config --global diff.docx.textconv pandoc --to=rst
git config --global diff.odt.textconv pandoc --to=rst
git config --global diff.pdf.textconv pdftostdout
3. Tell git to use the correct handlers
echo "*.docx diff=docx" >> ~/.config/git/attributes
echo "*.odt diff=odt" >> ~/.config/git/attributes
echo "*.pdf diff=pdf" >> ~/.config/git/attributes

Command-line feature, explain binary diff (if needed)
*.doc   diff=astextplain

====merge
Diff marker behavior
TODO
#*.sln       merge=binary

====sparse checkout
https://stackoverflow.com/questions/74072901/how-to-make-git-ignore-files-during-clone/74077699#74077699
https://blog.gitbutler.com/git-tips-and-tricks/

based on so you think you know git by gitbutler founder
TODO apply changes to git config

Show credential helper via
git config credential.helper
manager-core

https://wouterj.nl/2024/08/git-notes
idea store discussion with git

SHENNANIGAN
gitignore file is also matching case insensitive on Windows and there is no
default to check this stuff.

Git worktree structure as view on code:
* main - looking at the code history
* work - looking at current thing
* review - looking at other's code
* fuzz - computer look at code
* scratch - everything else

git for windows update
git update-git-for-windows

https://paperless.blog/git-bisect-run-techniques