List of dedicated formally proved languages
- Simulink TODO context
- TODO message passing languages
- TODO automata verification
  * standard formats for automata
  * import
  * codegen
    + PLC has codegen from ladder diagrams and other graphical methods

Proof effort is quadratic to code size.
TODO paper as source

Interesting formal things of programming languages:
- 1.implicit proof-carrying code
- 2.explicit proof-carrying code
- 3. verifying compilers with its cost
  * 2 general usable and fully verified optimizing compiler implementations
      + compcert
      + cakeml
- 4. lowering languages to Isabelle or other interesting proof systems as
  compiler backends (or using codegen for source code and proof like what
  cogent does).
- 5. Incremental verification via accurate tracking of code changes in editor
  * research in this area tries to recompute how git commits have changed
    code instead of eliminating the problem at the root
- 6. atomic memory reordering semantics
  * out of thin air problem in C11 as most known example, see ./templates/memory
- 7. pointer semantics is based on Separation logic (extension of Hoare Type
  Theory) with associated aliases
   * instead of "update the value", "update the value for all associated
     aliases"
   * unsettled in LLVM blocking CHERI usage (mixed tagged pointer capabilities)

To me unclear if solved:
- check, if cakeml and compcert have linker speak verified
- check if linker speak has a formal model
- Model for coroutine cancellation

Austral as language with linear type system without boilerplate (might become decent DSL)
https://borretti.me/article/introducing-austral
https://austral-lang.org/spec/spec.html#linearity
- cogent uses also a linear type system https://trustworthy.systems/projects/TS/cogent.pml.

(Cringe) thoughts on a perfect language:
```
Consider the theoretical optimal language being bootstrapped (in multiple steps)
from assembly.
Such language needs to have a freestanding build, link and dependency resolving
tool to impregnate every system for multiplying the fragments.
1.    can not build+link to the target: broken.
2.    can not resolve to find the ingredients: broken.
3.    too slow for the job: broken.
4.    too undefined: broken.
5.    no hotswapping and REPL for debugging: broken
6.    no usable async: broken
7.    no formal correctness proof of spec and parts: unfinished
Finishing 6th step is cursed and 7th perfection: the language for the ubermensch.

One possible outline of the plan:
1.    Have super simple to use + expressive + portable language
2.    Fix build scripts (simple to use + expressive)
3.    Fix dependency tracking+resolving (simple to use + expressive) => come up
      with language agnostic standard
4.    Have a sufficient user base to be reason to switch away from C codegen
      for static analysis + debugging.
5.    Define proper extensions on code plus fancy static analysis tools (borrow
      checking with comment syntax and separate AST/IR, so one has the slow borrow
      checker due to bigger AST and the fast compiler).
6.    Formal analysis interface to compiler (API to extract ASTs + PIE for analysis).
7.    World domination. Build a temple or something.
```
