windows
sig value   Description
SIGABRT     Abnormal termination
SIGFPE      Floating-point error
SIGILL      Illegal instruction
SIGINT      CTRL+C signal
SIGSEGV     Illegal storage access
SIGTERM     Termination request

Windows splits signals into a few facilities.
POSIX "synchronous" signals correspond to SEH exceptions and can be handled
roughly the same way --- except that signals have process global handlers and
Windows has thread-local ones.
For asynchronous signals, like SIGINT, Windows create a new thread out of thin
air to deliver your app a notification.
Windows even has APCs, which are like regular signals that are delivered only
at explicit system call boundaries.
Windows has evolved an approach that isn't all that different from Unix signal handling.

https://learn.microsoft.com/en-us/windows/console/handlerroutine


unixoid (Linux)
Generally, the existence of a process id at a timepoint does not mean that the
same process still lives. Another process could reuse the pid in the meantime
and one has to use process supervision via pid 1 or parent<->child process to
ensure the behavior.
To handle potentially malicious processes, one has to spawn reaper processes
to kill the child.

Signal      Standard   Action   Comment
────────────────────────────────────────────────────────────────────────
SIGABRT      P1990      Core    Abort signal from abort(3)
SIGALRM      P1990      Term    Timer signal from alarm(2)
SIGBUS       P2001      Core    Bus error (bad memory access)
SIGCHLD      P1990      Ign     Child stopped or terminated
SIGCLD         -        Ign     A synonym for SIGCHLD
SIGCONT      P1990      Cont    Continue if stopped
SIGEMT         -        Term    Emulator trap
SIGFPE       P1990      Core    Floating-point exception
SIGHUP       P1990      Term    Hangup detected on controlling terminal
                                or death of controlling process
SIGILL       P1990      Core    Illegal Instruction
SIGINFO        -                A synonym for SIGPWR
SIGINT       P1990      Term    Interrupt from keyboard

SIGIO          -        Term    I/O now possible (4.2BSD)
SIGIOT         -        Core    IOT trap. A synonym for SIGABRT
SIGKILL      P1990      Term    Kill signal
SIGLOST        -        Term    File lock lost (unused)
SIGPIPE      P1990      Term    Broken pipe: write to pipe with no
                                readers; see pipe(7)
SIGPOLL      P2001      Term    Pollable event (Sys V);
                                synonym for SIGIO
SIGPROF      P2001      Term    Profiling timer expired
SIGPWR         -        Term    Power failure (System V)
SIGQUIT      P1990      Core    Quit from keyboard
SIGSEGV      P1990      Core    Invalid memory reference
SIGSTKFLT      -        Term    Stack fault on coprocessor (unused)
SIGSTOP      P1990      Stop    Stop process
SIGTSTP      P1990      Stop    Stop typed at terminal
SIGSYS       P2001      Core    Bad system call (SVr4);
                                see also seccomp(2)
SIGTERM      P1990      Term    Termination signal
SIGTRAP      P2001      Core    Trace/breakpoint trap
SIGTTIN      P1990      Stop    Terminal input for background process
SIGTTOU      P1990      Stop    Terminal output for background process
SIGUNUSED      -        Core    Synonymous with SIGSYS
SIGURG       P2001      Ign     Urgent condition on socket (4.2BSD)
SIGUSR1      P1990      Term    User-defined signal 1
SIGUSR2      P1990      Term    User-defined signal 2
SIGVTALRM    P2001      Term    Virtual alarm clock (4.2BSD)
SIGXCPU      P2001      Core    CPU time limit exceeded (4.2BSD);
                                see setrlimit(2)
SIGXFSZ      P2001      Core    File size limit exceeded (4.2BSD);
                                see setrlimit(2)
SIGWINCH       -        Ign     Window resize signal (4.3BSD, Sun)

SIGKILL and SIGSTOP cannot be caught, blocked, or ignored.

Signal        x86/ARM     Alpha/   MIPS   PARISC   Notes
            most others   SPARC
─────────────────────────────────────────────────────────────────
SIGHUP           1           1       1       1
SIGINT           2           2       2       2
SIGQUIT          3           3       3       3
SIGILL           4           4       4       4
SIGTRAP          5           5       5       5
SIGABRT          6           6       6       6
SIGIOT           6           6       6       6
SIGBUS           7          10      10      10
SIGEMT           -           7       7      -
SIGFPE           8           8       8       8
SIGKILL          9           9       9       9
SIGUSR1         10          30      16      16
SIGSEGV         11          11      11      11
SIGUSR2         12          31      17      17
SIGPIPE         13          13      13      13
SIGALRM         14          14      14      14
SIGTERM         15          15      15      15
SIGSTKFLT       16          -       -        7
SIGCHLD         17          20      18      18
SIGCLD           -          -       18      -
SIGCONT         18          19      25      26
SIGSTOP         19          17      23      24
SIGTSTP         20          18      24      25
SIGTTIN         21          21      26      27
SIGTTOU         22          22      27      28
SIGURG          23          16      21      29
SIGXCPU         24          24      30      12
SIGXFSZ         25          25      31      30
SIGVTALRM       26          26      28      20
SIGPROF         27          27      29      21
SIGWINCH        28          28      20      23
SIGIO           29          23      22      22
SIGPOLL                                            Same as SIGIO
SIGPWR          30         29/-     19      19
SIGINFO          -         29/-     -       -
SIGLOST          -         -/29     -       -
SIGSYS          31          12      12      31
SIGUNUSED       31          -       -       31

Standards signals are transferred and handled asynchronously.

real-time signals
Linux kernel supports a range of 33 different real-time signals, numbered 32 to 64.
- no predefined meaning
- only 1 instance queued
- guaranteed order
- "programs should never refer to real-time signals using hard-coded numbers,
  but instead should always refer to real-time signals using the notation
  SIGRTMIN+n, and include suitable (run-time) checks that SIGRTMIN+n does not exceed SIGRTMAX"
- unspecified, if standard or real-time signals are delivered first

- Validate "Interruption of system calls and library functions by signal handlers"
- Note Interruption of system calls and library functions by stop signals
  "certain blocking interfaces can fail with the error EINTR after the
  process is stopped by one of the stop signals and then resumed via SIGCONT"

handle multiple signals via self pipe
signalfd
* saves you an additional thread to handle signals
* on startup child process must reset own signal masks (most libs dont so DIY)
* works by dequeuing signals
self-pipe trick
* install handler with SA_NODEFER to allow signals to interrupt themself
* mask signals except for thread who writes signals to pipe for consumption
* portable (Windows does kind of the same)

Okayish intro
https://www.jmoisio.eu/en/blog/2020/04/20/handling-signals-correctly-in-a-linux-application/
https://www.jmoisio.eu/en/blog/2020/10/13/non-blocking-server-c-linux/
1. Get pid via reading /proc
2. Use pid with kill
3. 'killed process' calls poll on pollfds (containing signalfd)
better: use use dedicated process management framework instead of
potential racy kill call with pid or not handling of blocked programs
signalfd.
Hereby 'signalfd' saves a separate thread only for signal handling.

SA_NODEFER may lose signals, but can catch them.