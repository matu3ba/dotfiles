https://best.openssf.org/Compiler-Hardening-Guides/Compiler-Options-Hardening-Guide-for-C-and-C++.html

"Exploiting Undefined Behavior in C/C++ Programs for Optimization: A Study on the Performance Impact"
* perf impact of optimized programs <10 % with higher impact on ARM and lower on non-ARM
* unclear impact of SIMD and non-SIMD usage with latter harder to optimize

1. tldr; flags
1.1 opt
-O2
1.2 warnings
-Wall -Wformat -Wformat=2 -Wconversion -Wimplicit-fallthrough -Werror=format-security \
1.3 protections and checks
-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 \
-D_GLIBCXX_ASSERTIONS \
-fstrict-flex-arrays=3 \
-fstack-clash-protection -fstack-protector-strong \
1.4 linker
-Wl,-z,nodlopen -Wl,-z,noexecstack \
-Wl,-z,relro -Wl,-z,now \
-Wl,--as-needed -Wl,--no-copy-dt-needed-entries
Suggestion to also use -Wsystem-headers, if feasible.
Note: This document does not include C++ options for hardening llvm libc++.
See further "Additional options flags" for production code etc.
Unclear for backtraces: -fno-omit-frame-pointer
Unclear for clang only in dev and production: -Wmost
2. context
too long for summary
3. recommendations
cc -O2 -dM -E - < /dev/null
4. discouraged
search paths

5. Sanitizers
Instrumented sanitizers with 2x-4x slowdown vs dynamic ones with 20x-50x.

Nr | Clang usage                  | Zig usage         | Memory           | Runtime | Comments
-- | ---------------------------- | ----------------- | ---------------- | -------- | --------
1  | -fsanitize=address           | alloc + safety    | 1x (3x stack)    | 2x       | Clang 16+ TB of virt mem
2  | -fsanitize=leak              | allocator         | 1x               | 1x       | on exit ?x? more mem+time
3  | -fsanitize=memory            | unimplemented     | 2-3x             | 3x       |
4  | -fsanitize=thread            | -fsanitize=thread | 5-10x+1MB/thread | 5-15x    | Clang ?x? ("lots of") virt mem
5  | -fsanitize=type              | unimplemented     | ?                | ?        | not enough data
6  | -fsanitize=undefined         | safety mode       | 1x               | ~1x      |
7  | -fsanitize=dataflow          | unimplemented     | 1-2x?            | 1-4x?    | wip, get variable dependencies
8  | -fsanitize=memtag            | unimplemented     | ~1.0Yx?          | ~1.0Yx?  | wip, address cheri-like ptr tagging
9  | -fsanitize=cfi               | unimplemented     | 1x               | ~1x      | forward edge ctrl flow protection
10 | -fsanitize=safe-stack        | unimplemented     | 1x               | ~1x      | backward edge ctrl flow protection
11 | -fsanitize=shadow-call-stack | unimplemented     | 1x               | ~1x      | backward edge ctrl flow protection

Sanitizers 1-6 are recommended for testing purpose and 7-11 for production by LLVM.
Memory and slowdown numbers are only reported for LLVM sanitizers. Zig does not
report own numbers yet (2025-01-11). Slowdown for dynamic sanitizer versions
increases by a factor of 10x in contrast to the listed static usage costs..
The leak sanitizer does only check for memory leaks, not other system resources.
Besides various Kernel specific tools to track system resources,
Valgrind can be used on Posix systems for non-memory resources and
Application Verifier for Windows.
Address and thread sanitizers can not be combined in Clang and combined usage
of the Zig implementation is limited by virtual memory usage.
In Zig, aliasing can currently not be sanitized against whereas in Clang only
typed based aliasing can be sanitized without any numbers reported by LLVM yet.

Address and thread sanitizers can not be combined.
* recommended -O1 -g -fno-omit-frame-pointer -fno-optimize-sibling-calls -fno-common
* overview https://doc.rust-lang.org/beta/unstable-book/compiler-flags/sanitizer.html
* docs https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
* extras outside of -fsanitize=address
use -O1 or higher, -fno-omit-frame-pointer, no TCE -fno-optimize-sibling-calls
ASAN_OPTIONS=detect_stack_use_after_return=1/0
ASAN_OPTIONS=check_initialization_order=1 (not supported on macOS)
ASAN_OPTIONS=detect_leaks=1 (no support on windows)
* extras Leak sanitizer (-fsanitize=leak)
also available configurably as ASAN option: ASAN_OPTIONS=detect_leaks=1
* extras Uninitialized Memory sanitizer (-fsanitize=memory)
use -O1 or higher, -fno-omit-frame-pointer, no TCE -fno-optimize-sibling-calls
Memory usage 2x to 3x
Typical slowdown 3x
* extras Undefined Behavior sanitizer (-fsanitize=undefined)
Extra options
-fsanitize=unsigned-integer-overflow
-fsanitize=implicit-conversion
-fsanitize=array-bounds
-fsanitize=nullability
* extras Thread sanitizer -fsanitize=thread
use -O1 or higher -g for file names and line numbers
* extras outside of -fsanitize=type
TODO no data and docs yet

6. maintain debug infos in separate files
objcopy --only-keep-debug executable_file executable_file.debug
objcopy --strip-unneeded executable_file
objcopy --add-gnu-debuglink=executable_file.debug executable_file

strip --strip-unneeded executable_file
7. compiling compilers and linkers
--enable-default-pie --enable-default-ssp --enable-host-pie --enable-host-bind-now
--disable-default-execstack --enable-warn-execstack --enable-error-execstack --enable-warn-rwx-segments --enable-error-rwx-segments --enable-relro --enable-textrel-check=error --enable-secureplt
8. missing are fuzzer usage

9. analyzers and static checkers
clang -std=c99 --analyze file.c
TODO


Appendum. Other ecosystems
* zig
  - no default configuration files
  - simple diagnostics
  - Disable standard include dirs for C++ std lib -nostdinc
  - no spell check -fno-spell-checking
  - system path -isystem
  - sanitize a bunch of things except function prongs -fsanitize
  - red zone compiler not clobbered by compiler or OS (default on) -mred-zone
  - emit frame ptr, strong stack protector
  - depfile contains user and system headers -MD
  - depfile NMake/Jom format -MV
  - depfile path -MF
  - only run preprocess, compile, and assemble steps -c
  - output to file -o
clang --no-default-config -fno-caret-diagnostics -D__GLIBC_MINOR__=39
-nostdinc -fno-spell-checking
-isystem zig_include_path -isystem /usr/include
-fsanitize=undefined -fsanitize-trap=undefined -fno-sanitize=function
-mred-zone -fno-omit-frame-pointer -fstack-protector-strong
--param ssp-buffer-size=4
-D_DEBUG -O0
-funwind-tables -fPIC
-gdwarf-4 -gdwarf32
-MD -MV -MF PROJECT_PREFIX/.zig-cache/tmp/HASH-catch.o.d
-c
-o PROJECT_PREFIX/.zig-cache/tmp/HASH-catch.o
--serialize-diagnostics PROJECT_PREFIX/.zig-cache/tmp/HASH-catch.o.diag
* strict gcc
gcc -Wall -Wformat -Wformat=2 -Wconversion -Wimplicit-fallthrough -Werror -Wextra -Wpedantic -Wtrampolines -Wshadow -Wold-style-cast -Woverloaded-virtual file.c
* strict g++
g++ -Wall -Wformat -Wformat=2 -Wconversion -Wimplicit-fallthrough -Werror -Wextra -Wpedantic -Wtrampolines -Wshadow -Wold-style-cast -Woverloaded-virtual file.cpp
* reasonable strictest warnings clang/zig cc
zig cc -std=c23 -Werror -Weverything -Wno-unsafe-buffer-usage -Wno-declaration-after-statement -Wno-switch-default -Wno-c++98-compat -Wno-pre-c11-compat -Wno-pre-c23-compat ./templates/common.c
* reasonable strictest warnings clang++/zig c++
zig c++ -std=c++26 -Werror -Weverything -Wno-c++98-compat-pedantic -Wno-c++20-compat -Wno-unsafe-buffer-usage -Wno-switch-default file.cpp
