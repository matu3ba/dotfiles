====Processes
Linux: /proc
FreeBSD: procstat
====Files
procstat -f, fstat
====Network
FreeBSD: sockstat
Linux: ss

best practice long-running system design
https://arcan-fe.com/2020/02/10/leveraging-the-display-server-to-improve-debugging/
idea: make it cross-platform

* source requests debug session
* target checks permissions and sets capabilities via prctl
* forwards the request to src process

see also "Systemic Software Debugging"
tldr;

====Debug Tooling
IDA Pro
- Hex-Rays decompilers

====libdebug
https://github.com/libdebug/libdebug

====gdb_design problem
Core problem of abstraction in gdb:
- tui without any stability guarantee
- python scripting
- MI (machine interface)
  * requires parsing deeply complex and hostile data across privilege boundaries
- DAP (debugger adapter protocol)
  * usable for example in neovim

====WinDbg and gdb with
- enhancement plugins such as peda pwndbg
- peda https://github.com/longld/peda
- pwndbg https://github.com/pwndbg/pwndbg

====gdb
- posix gdb frontend https://github.com/nakst/gf
- server impl https://github.com/blackmagic-debug/blackmagic/blob/main/src/gdb_packet.c
- ARM microcontrollers https://github.com/blackmagic-debug/blackmagic

====MSan, TSan
- bug discovery, crash deduplication, root cause analysis

====Bochs x86 emulator
- very convenient instrumentation API, compatibility with the latest CPU
  features and ability to instrument entire operating systems

====windbg
https://www.codeproject.com/articles/6084/windows-debuggers-part-1-a-windbg-tutorial
debugging https://www.youtube.com/@HighVoiceComputing/videos

====kvm
https://github.com/qemu/qemu
https://github.com/tw4452852/zvm

====tracer
https://github.com/anakryiko/retsnoop
https://github.com/tw4452852/zbpf
