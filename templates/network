https://discourse.nixos.org/t/set-up-wifi-minimal-system/8554
wpa_supplicant
wcli

networkmanager
networkctl list
nmcli
nmtui
avahi-discover


ping command examples
-w TIMEOUT    [to test if there is a connection at all]

list all ip addresses connected to your server
netstat -tn 2>/dev/null | grep :80 | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | head

Process is not shown in netstat on Linux
sudo ss -lptn 'sport = :80'
sudo netstat -nlp | grep :80
sudo lsof -n -i :80 | grep LISTEN

To show the gateways (routers):
ip route
To show the default gateway[s]:
ip -4 route show default
ip -6 route show default

Trace network route:
traceroute IP
tracepath -b IP

tcpdump options
-D list of devices
-c X number of packets before stopping
-n (ip addresses instead of names)
-sSIZE limit of capture
port PORT
-w write into file
-i interface
tcpdump -i hwinterface -w file.tcpdump
tcpdump -i hwinterface -w file.pcap
wireshark file.tcpdump

specify a source IP address, destination IP address and source port in tcpdump filter
tcpdump -i enp1s9 dst 192.168.6.1 and src 192.168.6.2 and src port 80

To get the ip visually, use `ip a` and look for dynamic (typically DHCP)
IP=THEIP
PORT=80
sudo tcpdump -n -i eth0 -w file.tcpdump "(src port PORT or dst port PORT) and not (src net YOURIP or dst net YOURIP)"
To get interfaces and ips, use: ip -br a
To get interface information, ie to search for dynamic (DHCP): ip -f inet addr show interface

Alternatives to tcpdump on Windows(tcpdump does not work in WSL): winpcap, wireshark, netsh trace
netsh trace start capture=yes IPv4.Address=192.168.122.2
Reading trace on Windows with "Message Analyzer".

Adding static ip address to connect to same subsystem
sudo ip a a 192.168.XX.XX/24 dev interface

sudo nft flush ruleset
sudo nft add table nat

Port forwarding ssh to https(usage via 'ssh user@192.168.XX.YY -p 443') taken from
https://wiki.nftables.org/wiki-nftables/index.php/Performing_Network_Address_Translation_(NAT)

sudo sysctl net.ipv4.ip_forward=1
sudo nft flush ruleset
sudo nft add table nat
sudo nft 'add chain nat postrouting { type nat hook postrouting priority 100 ; }'
sudo nft 'add chain nat prerouting { type nat hook prerouting priority -100; }'
sudo nft 'add rule nat prerouting ip daddr 192.168.XX.YY tcp dport { 443 } dnat 192.168.XX.YY:22'
sudo nft 'add rule nat postrouting masquerade'

Get all responding ips:
arp -[a|e]

Print hostname entries via working DNS:
host -t a DNS
dig +short DNS
getent hosts DNS
nslookup DNS
python -c 'import socket; print socket.gethostbyname("DNS")'

Get multicast ip in ip4 only network:
ping -v4 DNS
Search for ips with open ports 80:
nmap -p 80 192.168.178.0/24 --open

Search for specific hostname (not all devices provide one):
nmap -sP 192.168.178.0/24 | grep YOUR_HOSTNAME
nmap -L 192.168.178.0/24 | grep YOUR_HOSTNAME
Get local hostname:
hostname
cat /proc/sys/kernel/hostname
Set hostname permanently
hostnamectl set-hostname SOMESTRING|URL
cat /etc/hostname

Retrieve all ips via broadcast (ipv4 broadcast is disabled per default on
Linux, but ipv6 all node multicast addresse is not):
ping ff02::1%eth0 -w 2
Hop to the next pc via link local address (requires network interface ethX):
ssh user@IPV6(ANUM:ANUM:..)%ethX

Get MAC address of other device:
nmap -sn 192.168.178.0/24
Get MAC address of current device:
ip a
cat /sys/class/net/enp0s3/address
ind /sys/class/net -mindepth 1 -maxdepth 1 ! -name lo -printf "%P: " -execdir cat {}/address \;
To get all routes
ip r

Get SSIDs via iw:
sudo iw wlan0 scan > /tmp/wifis
wpa_supplicant:
wpa_passphrase ESSID | sudo tee /etc/wpa_supplicant.conf
systemctl restart wpa_supplicant

iwconfig wlan0 | grep -i --color quality

Proc net docs: https://www.kernel.org/doc/Documentation/networking/proc_net_tcp.txt
bashonly: TCP_PORT_STATUS=`(echo > /dev/tcp/x.x.x.x/yyyy) >/dev/null 2>&1 && echo "UP" || echo "DOWN"`; echo $TCP_PORT_STATUS
nc -vz IP_Address Port
netcat may or may not exit the sending tcp connection and may hang forever in scripts
Quit immediately after receiving EOF: nc -N IP_Address Port

Ports < 1024 are privileged by default. Anything above can be freely used.

fast reconfiguration of dns (due to lags)
TODO

https://man.archlinux.org/man/wireshark-filter.4.en
https://www.wireshark.org/docs/man-pages/wireshark-filter.html
https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html
https://blog.packet-foo.com/2013/05/the-notorious-wireshark-out-of-memory-problem/
cd "C:\Program Files\Wireshark"
-b means before, -a means after filesize in kb
dumpcap
dumpcap -D
dumpcap -i X -b filesize:65535 -w "D:\wireshark_networktrace\trace.pcapng"
dumpcap -i 2 -w "D:\wireshark_networktrace\20231221.pcapng"

https://isc.sans.edu/diary/No+Wireshark+No+TCPDump+No+Problem/19409
alternative without wireshark to capture packages