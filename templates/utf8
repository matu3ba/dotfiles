Motivation
https://utf8everywhere.org/

git ls-files '.[h|c]' '.cpp' | xargs -n1 file > formats
to workaround spaces in paths
Use dos2unix to remove bom and git add --renormalize .
Git is not nice, because it does not check if file needs bom
UTF-16LE is used, but Git suggests to try to use the BOM.
Test via push to remote and local checkout, complete build and
running all unit tests.

Detect unknown encodings based on
https://unix.stackexchange.com/questions/304177/convert-binary-encoding-that-head-and-notepad-can-read-to-utf-8
file unix_filepath
- 1. no result?
  * pip install chardet
  * chardetect file_pa1 file_pa2 ..
  * iconv -f FROM -t utf-8 /tmp/textFile -o /tmp/outtextFile
  * iconv -f FROM -t utf-8 /tmp/textFile  > /tmp/outtextFile
  * iconv -f ISO-8859-1 -t utf-8 /tmp/textFile  > /tmp/outtextFile
- 2. result without UTF-8 BOM: use iconv step in 1.
- 3. result with UTF-8 BOM
  * sed -i 's/\xef\xbb\xbf//' /tmp/textFile
  * BSD sed: sed -i '' ..

show file encodings detected by editor
* vim/nvim: :set fileencoding
* TODO typical editors

typical encodings

- latin1 = iso-8859-1
* within vim/nvim cmd window execution usage of
  + :set fileencoding
  + latin1
iconv -f iso-8859-1 -t utf-8 /tmp/textFile  > /tmp/outtextFile

idea explain C++ side + prepare for C++26
https://dbj.org/c-convert-any-sequence-to-any-standard-string/

TODO utf8 table
