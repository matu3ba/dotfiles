Greg Law - More GDB wizardry and 8 other essential Linux application debugging tools

ps aux | grep execname
gdb pathtoexec -p PID
Common debugging use cases, for practical usage see ../example/gdb/ starting with inf_loop.c
- 1. debug running process (interrupts on attach)
gdb -p PID
  * dump program state
generate-core-file
ptrace(GETSIGINFO)
siginto_t struct
- 2. dump program state without interrupting process
gcore
- 3. automatically dump program state
  * ulimit -c must return unlimited
  * manually causing coredump via C-\
  * /var/lib/systemd/coredump/ coredump location
    (systemd-coredump must be installed)
  * coredumpctl list
  * coredumpctl dump 2919576 --output ~/ghostty_2919576.core
  * gdb -c ghostty_2919576.core $(which ghostty)
  * gdb ~/.local/bin/ghostty ~/ghostty_2919576.core

https://debugging.works/blog/analyzing-linux-coredump/

https://wiki.archlinux.org/title/Core_dump
https://www.baeldung.com/linux/managing-core-dumps

https://stackoverflow.com/questions/70798468/gdb-debug-two-instances-of-the-same-application-simultaneous
https://stackoverflow.com/questions/64662738/run-file-with-gdbserver-multi
https://www.makeuseof.com/getting-started-with-gnu-debugger-on-linux/
https://www.thegeekstuff.com/2014/04/gdbserver-example/
attaching without lowering security is error prone in most graphical frontend

redirect output of gdb
1. gdb core.3599 -ex bt -ex quit |& tee backtrace.log
2. info terminal, tty /dev/ttyb, run > outfile
3. pipe bt | cat > backtrace.log

casual process dumps:
PID=$(pgrep PROGRAM) && sudo -E capsh --caps="cap_setpcap,cap_setuid,cap_setgid+ep cap_sys_ptrace+eip" --keep=1 --user="$USER" --addamb="cap_sys_ptrace" --shell=/usr/bin/gdb -- -p $PID
on warning, either use unsafe sudo or update libcap
pipe TODO dump sp context | cat > sp.log
pipe bt | cat > bt.log
pipe thread apply all backtrace | cat > all_bt.log
pipe thread apply all backtrace full | cat > all_fullbt.log
gcore

Debug approaches
- 1. attach to process + loop detection
  variations: 1. (partial) repitive state, 2. non-repitive state
  * usual approach: running, then use C-c for SIGINT (requires that process does support halting)
  * practical approach if SIGINT makes system unobservable: bisect graphically code base based on log data
- 2. prevent internal timer firing to kill process
  must provide own timer logic + 1. either dll injection, 2. LD_PRELOAD or 3. 'function instrumentation hocks'
  see https://github.com/martong/finstrument_mock
  Compile-Time Function Call Interception for Testing in C/C++

gdb tui
C-x-a      toggle to/from tui mode
C-l        refresh screen
C-p/C-m    prev,next cmd
C-x 2      2nd windows, cycle through views

python help(gdb)
set history save on
set print pretty on
set pagination off
set confirm off

# to fix cross-compiled gdb etc:
import os
# to show events
info handle

Excellent introduction: https://interrupt.memfault.com/blog/advanced-gdb

breakpoints:
break Sema.zirStoreNode if inst == 999

pretty printing:
echo 'source ${HOME}/dev/git/zig/zig/master/tools/zig_gdb_pretty_printers.py' >> ${HOME}/.gdbinit
source ${HOME}/dev/git/zig/zig/master/tools/stage1_gdb_pretty_printers.py
source ${HOME}/dev/git/zig/zig/master/tools/stage2_gdb_pretty_printers.py
and append 'Path(file).parent' to 'sys.path' before the import

alternative use:
~/.gdbinit:
python
import sys
# set this to the path of the pretty printer
sys.path.insert(0, '/path/to/src/rust/src/etc/')
import gdb_rust_pretty_printing
gdb_rust_pretty_printing.register_printers(gdb)
end

using the printing:
p variable
p/t variable
p/x variable


ps -p pid (posix)
pgrep pname
pidof pname
ps aux | grep -i process
on fork/posix_spawn:
default: set follow-fork-mode parent
other:  set follow-fork-mode child
set detach-on-fork on|off
info inferiors
inferior N
add-inferior <count> <name> [attachPID]
remove-inferior N
clone-inferior N
print $_inferior
shell sleep 40 &
shell ps

Debugging on Windows:
https://remedybg.itch.io/remedybg

# breakpoints and commands
save breakpoints COMMAND_FILE
source COMMAND_FILE
gdb -x COMMAND_FILE

# get pid
info inferior
print getpid()

gdb PROGRAM [core dump]
gdb --args PROGRAM ARGS
gdb --pid PID
set args ARGS
run/r
kill/k?

break/b WHERE
delete/d BREAKP ..
clear
enable BREAKP
disable BREAKP

watch WHERE
samecommands_as_BREAKP WATCHP
del/enable/disable WATCHP
watch -l location
rwatch
watch foo thread 3
watch foo if foo > 10

assembly
layout asm/code
layout regs
info r
si

x86
execution can be described by base, stack, instruction pointer (%rbp, %rsp, %rip)
special one is %rflags
function args: %rdi, %rsi, %rdx, %rcx, %r8, %r9
return value (accumulator): %rax
Calle-saved are %rbx, %r12, %r13, %r14, %r15, %rsp, %rbp [%rip is general]
Types of assembly: computation, data movement, control flow, constrains/reordering
register (%rbp), immediate ($0x4), memory (0x4, symbol_name, symbol_name(%rip),
symbol_name+4(%rip), (%rax), 0x4(%rax), (%rax,%rbx), (%rax,%rbx,4), 0x18(%rax,%rbx,4) )
rip-relative addressing is called pic code.

WHERE: fn_name, line_number, file:line_number
break/watch WHERE if CONDITION
(CONDITION = C expression evaluating to true or false)
condition BREAK .. CONDITION
tbreak   temp breakpoint
rbreak   regex breakpoint
command  list cmds to exec when breakpoint hit
silent   suppress output on breakpoint hit
save breakpoints   save list of breakpoints to script
save history       save history of executed gdb cmds
info line foor.c:42     show PC for line
info line * $pc         show line begin/end for current pc

Also: gcc -Og, -ggdb3 better than -g

valgrind --vgdb=full --gdb-error=0 ./exec

backtrace
where (to show stack)
backtrace full
where full (to show call stack and print local vars in each frame)
frame address|apply|function|level|view STACK_FRAME
step/s
next/n
finish/f
continue/c

Show stack context
x/100x $sp
info frame
bt
x/x $esp for hex x/d $esp for signed x/u $esp for unsigned, x/1s for 1 byte string
current instruction via x/i $eip

print/formwat WHAT
ptype WHAT
display/format WHAT
undisplay DISPLAY ..
enable display DISPLAY
disable display DISPLAY
x/nfu ADDRESS (n how many units,
               f format char (acdfostux) see `help x`
               u unit (b,h,w,g))
WHAT: C expression, filename::varname, fn::varname, {type}address, $register

thread THREAD ..
thread apply all backtrace
thread apply all backtrace full

dprintf mutex_liock "m is %p m->magic is %u\n", m,m->magic
set dprintf-style gdb|call|agent
set dprintf-function fprintf
set dprintf-channel mylog

Extremely handy to catch signals or exceptions:
catch catch
catch syscall nanosleep
catch syscall 100

set var VARNAME=VAL
return EXPRESSION

Print general info:
directory DIR
list
list filename:fn
list filename:line_number
list first:last
set listsize COUNT
handle SIGNAL OPTIONS ((no)print, (no)stop, (no)pass)
disassmeble
disassmeble WHERE
info args
info breakpoints
info display
info locals
info sharedlibrary
info signals
info threads
show directories
show listsize
whatis varname

See
`help show history`
`show history`
`show commands`
`set history`

environment variables
1. via cli
env -i MyVar=$(python -c 'print("xyz")') gdb
(gdb) show environment
2. within gdb
(gdb) unset environment
(gdb) python gdb.execute("set environment Myvar=\xff")
(gdb) show environment
(gdb) set environment LD_LIBRARY_PATH ./lib
3. shell wrapper
LD_LIBRARY_PATH=./lib gdb -x dscr ./bin/executable
4. neovim, vim
:lua vim.env.LD_LIBRARY_PATH="./lib", :let $LD_LIBRARY_PATH = "./lib"

idea:
start process from gdb and signal it from gdb script


set/show scheduler-locking mode
where mode is replay, step, on (OS-dependent)
set/show schedule-multiple

set scheduler-locking on
set scheduler-locking off
set scheduler-locking step

if that does not work:
- use rr
if that does not work:
- send remote command to running gdb session on what process to attach
  * set port of gdb process beforehand
  * remote commands for the setting
if that does not work
- attach to the running process in a timely manner after initialization via
  sending gdb command for attaching to tmux/zellij pane
  * make sure the pane is already spawned to minimize delay
if that does not work
- debugging inside qemu runner
if that does not work:
- reduce the problem + printf debugging of all intermediat artefacts
  * we have no way to introspect the problem, so we can only try to modify
    the system behavior

gdbserver localhost:2000 ./exec
target remote localhost:2000


-fno-stack-protector
-static

Simple reverse execution without rr:
break executable:line
run
print somestuff
awatch *$1
record full
continue

tracing function calls
https://gist.github.com/quark-zju/a20ae638601d2fac476e

https://gist.github.com/shekkbuilder/8b52e2cf4142c35ba6de
for dbx, gdb, windbg, ntsd, edebug etc but not lldb

PERMISSIONS aka capabilities
Linux provides no per-user ptrace permission model to allow one user to debug
all processes, so one has to use the Linux capability shell wrapper for this or
set capability on the binary itself. Another alternative is to use the syscalls.
Enable ptrace once (https://bbs.archlinux.org/viewtopic.php?id=278831)
sudo -E capsh --caps="cap_setpcap,cap_setuid,cap_setgid+ep cap_sys_ptrace+eip" --keep=1 --user="$USER" --addamb="cap_sys_ptrace" --shell=/usr/bin/gdb -- -p
Debug and set capabilities to executables from https://blog.container-solutions.com/linux-capabilities-in-practice
capsh --print, grep Cap /proc/$BASHPID/status, capsh --decode=0000003fffffffff
sudo setcap 'cap_net_raw+p' ./ping
/etc/sysctl.conf
## CL. Disable ptrace for users (temporarily)
kernel.user_ptrace = 0
kernel.user_ptrace_self = 0
/etc/sysctl.d/10-ptrace.conf
## Enable ptrace for users (permanently)
kernel.yama.ptrace_scope

CPP
Print std::string values
p *(char**)0x7fffffffbfc0
Print vector
print *(x._m_impl._m_start+0)

SHENNANIGAN
Printing std::map entries fails with 'Could not find operator[].', because map entry is std::string.
Solution 1:
std::string make_string(const char *x) { return x; }
p mymap.at(make_string("Mars"))
Solution 2:
set $mystr = (std::string*) malloc(sizeof(std::string))
call $mystr->basic_string()
call $mystr->assign("foo")
call some_function(*$mystr)

Nice exercises to practice debugging.
https://github.com/guyinatuxedo/nightmare/tree/master

Paid content https://guidedhacking.com/
Free ones https://zweilosec.gitbook.io/hackers-rest/, https://www.ired.team/
Manually mapping Windows dll https://www.youtube.com/watch?v=qzZTXcBu3cE

debugger tricks
* keep line numbers correct (+ while editing) https://nullprogram.com/blog/2024/01/28/