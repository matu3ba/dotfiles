Excellent introduction: https://interrupt.memfault.com/blog/advanced-gdb

breakpoints:
break Sema.zirStoreNode if inst == 999

pretty printing:
echo 'source ${HOME}/dev/git/zig/zig/master/tools/zig_gdb_pretty_printers.py' >> ${HOME}/.gdbinit
source ${HOME}/dev/git/zig/zig/master/tools/stage1_gdb_pretty_printers.py
source ${HOME}/dev/git/zig/zig/master/tools/stage2_gdb_pretty_printers.py
and append 'Path(file).parent' to 'sys.path' before the import

alternative use:
~/.gdbinit:
python
import sys
# set this to the path of the pretty printer
sys.path.insert(0, '/path/to/src/rust/src/etc/')
import gdb_rust_pretty_printing
gdb_rust_pretty_printing.register_printers(gdb)
end

using the printing:
p variable

ps -p pid (posix)
pgrep pname
pidof pname
ps aux | grep -i process
on fork/posix_spawn:
default: set follow-fork-mode parent
other:  set follow-fork-mode child

Debugging on Windows:
https://remedybg.itch.io/remedybg

# breakpoints and commands
save breakpoints COMMAND_FILE
source COMMAND_FILE
gdb -x COMMAND_FILE

# get pid
info inferior
print getpid()

gdb PROGRAM [core dump]
gdb --args PROGRAM ARGS
gdb --pid PID
set args ARGS
run/r
kill/k?

break/b WHERE
delete/d BREAKP ..
clear
enable BREAKP
disable BREAKP

watch WHERE
samecommands_as_BREAKP WATCHP
del/enable/disable WATCHP

WHERE: fn_name, line_number, file:line_number
break/watch WHERE if CONDITION
(CONDITION = C expression evaluating to true or false)
condition BREAK .. CONDITION

backtrace
where (to show stack)
backtrace full
where full (to show call stack and print local vars in each frame)
frame FRAME .. (select stack frame to operate on)

step/s
next/n
finish/f
continue/c

print/formwat WHAT
ptype WHAT
display/format WHAT
undisplay DISPLAY ..
enable display DISPLAY
disable display DISPLAY
x/nfu ADDRESS (n how many units,
               f format char (acdfostux) see `help x`
               u unit (b,h,w,g))
WHAT: C expression, filename::varname, fn::varname, {type}address, $register

thread THREAD ..

set var VARNAME=VAL
return EXPRESSION

directory DIR
list
list filename:fn
list filename:line_number
list first:last
set listsize COUNT
handle SIGNAL OPTIONS ((no)print, (no)stop, (no)pass)
disassmeble
disassmeble WHERE
info args
info breakpoints
info display
info locals
info sharedlibrary
info signals
info threads
show directories
show listsize
whatis varname

See
`help show history`
`show history`
`show commands`
`set history`

environment variables
1. via cli
env -i MyVar=$(python -c 'print("xyz")') gdb
(gdb) show environment
2. within gdb
(gdb) unset environment
(gdb) python gdb.execute("set environment Myvar=\xff")
(gdb) show environment
(gdb) set environment LD_LIBRARY_PATH ./lib
3. shell wrapper
LD_LIBRARY_PATH=./lib gdb -x dscr ./bin/executable
4. neovim, vim
:lua vim.env.LD_LIBRARY_PATH="./lib", :let $LD_LIBRARY_PATH = "./lib"

TODO:
start process from gdb and signal it from gdb script


set/show scheduler-locking mode
where mode is replay, step, on (OS-dependent)
set/show schedule-multiple

set scheduler-locking on
set scheduler-locking off
set scheduler-locking step

if that does not work:
- use rr
if that does not work:
- send remote command to running gdb session on what process to attach
  * set port of gdb process beforehand
  * remote commands for the setting
if that does not work
- attach to the running process in a timely manner after initialization via
  sending gdb command for attaching to tmux/zellij pane
  * make sure the pane is already spawned to minimize delay
if that does not work
- debugging inside qemu runner
if that does not work:
- reduce the problem + printf debugging of all intermediat artefacts
  * we have no way to introspect the problem, so we can only try to modify
    the system behavior
