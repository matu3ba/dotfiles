====MSVC_build_system
====MSVC_msbuild
====kernel
====debug
====build_problems
====debugging_timetravel
TODO cleanup

Get installation location of msvc c, c++ compiler and linker with batch file:
cd %ProgramFiles(x86)%\Microsoft Visual Studio\Installer\
vswhere
installationPath 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community'
fd cl.exe 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community'
fd link.exe 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community'
'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe'
'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\link.exe'
VS2015 x64 Native Tools Command Prompt
x64 Native Tools Command Prompt for VS2019
notepad++ with HEX-Editor

====MSVC_build_system
.sln file contains 1. build modes (Debug/Release;x64 etc), 2. dependencies and
3. actively tracked dependencies (*must* be marked as actively tracked or they are
ignored, even though the dependency marks them as needed and there is a change)
Adjusting
1. graphically or via msbuild
2. via Right click on project => Build dependencies => Project dependencies
3. via below build modes "configuration manager" => Configuration Platform Build and Deploy

The build format is a hash like EAEE7988-385C-4CEF-AF76-20513D802A97 for each
project reference (with the hash being generated in an unspecified way), so
Visual Studio is needed to generate the hash for the project.

====MSVC_msbuild
uses - in later version and / in earlier one

function Resolve-MsBuild {
	$msb2017 = Resolve-Path "${env:ProgramFiles(x86)}\Microsoft Visual Studio\*\*\MSBuild\*\bin\msbuild.exe" -ErrorAction SilentlyContinue
	if($msb2017) {
		Write-Host "Found MSBuild 2017 (or later)."
		Write-Host $msb2017
		return $msb2017
	}
	$msBuild2015 = "${env:ProgramFiles(x86)}\MSBuild\14.0\bin\msbuild.exe"
	if(-not (Test-Path $msBuild2015)) {
		throw 'Could not find MSBuild 2015 or later.'
	}

	Write-Host "Found MSBuild 2015."
	Write-Host $msBuild2015

	return $msBuild2015
}
$msBuild = Resolve-MsBuild
# e.g. & $msBuild .\Foo.sln

One important note: if your project has a '.' in the name, you'll need to replace it with a '_' when specifying it with /t

Clean rebuild and incremental for Debug and Release profiles
msbuild project.sln /t:Clean;Rebuild /p:Configuration=Debug /p:Platform=x64 -nologo
msbuild project.sln /t:Build /p:Configuration=Debug /p:Platform=x64 -nologo
msbuild project.sln /t:Clean;Rebuild /p:Configuration=Release /p:Platform=x64 -nologo
msbuild project.sln /t:Build /p:Configuration=Release /p:Platform=x64 -nologo -v:diag
Debug problems via -v:Lvl Lvl is q,m,n,d,diag
msbuild project.sln /t:Build /p:Configuration=Release /p:Platform=x64 -nologo -v:d

Syntax for target:
/t:SlnFolder\My_Project_name:Rebuild;SlnFolder\My_Project_name2:Clean
Verbosity
-v:level

This should probably run analysis manually
msbuild MySolution.sln /p:RunCodeAnalysis=true

SHENNANIGAN VS2015 Disabling stdafx.h may or may not work.

https://learn.microsoft.com/en-us/visualstudio/ide/msbuild-logs?view=vs-2022
On incremental build slowdown search in verbose build output:
- missing
- Project is
- Project not
- Tools-Version not available: https://learn.microsoft.com/de-de/visualstudio/msbuild/msbuild-toolset-toolsversion?view=vs-2022
- no usable IPDB/IOBJ from previous compilation was found.
  fix:
- Creating "TARGET_DIR\PROJECT\PROJECT.tlog\unsuccessfulbuild" because "AlwaysCreate" was specified.
  fix: use newer VS2022 version
- fix custom build step dependency changing in tree files
  * replicate behavior of File.h
  * fix behavior of File.h

unfixable
- lock on project, if project opened graphically and building
- changes of used files in project file invalidates solution cache (forces complete build)

====debug
Debugging macros
"Project + Properties, C/C++, Preprocessor, Preprocess to a File = Yes.
/E, /P, /EP
cl /I C:\Test\ /EP C:\Test\main.cpp > C:\Test\macro.txt
idea cl set out dir

specify object file name
https://learn.microsoft.com/en-us/cpp/build/reference/fo-object-file-name?view=msvc-170
/Fo"pathname"
/Fo:[ ]"pathname"

Does Visual Studio have 'include what you use' iwyu to make compilation incrmental?
https://github.com/include-what-you-use/include-what-you-use
https://devblogs.microsoft.com/cppblog/recommendations-to-speed-c-builds-in-visual-studio/#_incremental
https://learn.microsoft.com/en-us/visualstudio/ide/walkthrough-building-an-application?view=vs-2022
https://stackoverflow.com/questions/37785991/where-to-add-the-directory-for-def-file-in-visual-studio

lldb debugger with vscode: https://github.com/vadimcn/codelldb

Visual Studio Plugins
- editorconfig
https://learn.microsoft.com/en-us/visualstudio/ide/cpp-editorconfig-properties?view=vs-2019&viewFallbackFrom=vs-2022
- git diff margin
  * does not support git worktrees https://github.com/laurentkempe/GitDiffMargin/issues/88
  * may randomly fail https://github.com/laurentkempe/GitDiffMargin/issues/460
- vsvim has many conflicting keybindings
- Solution Color needed, because VisualStudio has no trivial way to view the path to the workdir

SHENNANIGAN Piping output of graphical applications does not work on default.
Doing it without effort (use own stdout handle) requires arcane settings to use both console and standard handles:
gcc -mconsole test_gdi.c -lgdi32

====build_problems
Build problems, ie incremental build problems:
Tools -> Options -> Proj & Sol. -> Build & Run -> build log verbosity -> diagnostic
Search for "Project not up to date because" or "missing".
Compare with msbuild output.

Generate compile_commands.json from Visual Studio with "Clang Power Tools VS extension".
This mandates Visual Studio >= 2017, for example Microsoft Visual Studio Community 2019.
Alternative of bear likely does not work.
https://clangpowertools.com/blog/generate-json-compilation-database.html
Solution Rightclick -> Clang Power Tools -> Export Compilation Database

workaround admin privileges for installer files (.exe):
insert into run.bat with :set encoding=ansi
set __COMPAT_LAYER=RunAsInvoker
start INSTALLER.exe
and call it from cmd.exe as run.bat

zig:
Look into the ci scripts for windows https://github.com/ziglang/zig/tree/master/ci
and get https://ziglang.org/deps/zig+llvm+lld+clang-x86_64-windows-gnu-$VERSION.zip

Getting ntdll (and win32) calls
https://learn.microsoft.com/en-us/sysinternals/downloads/procmon
https://www.x86matthew.com/view_post?id=lognt32
http://jacquelin.potier.free.fr/winapioverride32/

hooking for instrumentation
https://github.com/microsoft/detours
https://github.com/TsudaKageyu/minhook
https://github.com/Xenely14/zig-minhook

Debugging methods
msvs monitor (remote debugger server): msvsmon.exe
Remote Debugger Port Assignments from Remote Debugger Port Assignments - Visual Studio (Windows)
* Visual Studio 2022: 4026
* Visual Studio 2019: 4024
* Visual Studio 2017: 4022
* Visual Studio 2015: 4020
TEST-PC:4200
Name also shown in console log of msvsmon.exe
* requires local network or extensively accessible ports
* unfeasible over remote, so one has to run debugger locally
* copying to UNC paths unnecessary complex due to powershell shortcomings (requires robocopy)
  * net use \\IP\drive_without_colon\more_path
  * cp C:\some_path \\IP\drive_without_colon\more_path
    Copy-Item  -LiteralPath Z:\$name  -Destination I:\Dat\SomePath\ss/ -Force
    results in "Access to the path [..] is denied"
  https://serverfault.com/questions/666192/writing-unc-path-names-to-a-different-drive

https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/choosing-the-best-remote-debugging-method
https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/remote-debugging-through-the-debugger
https://stackoverflow.com/questions/25032832/way-to-configure-vs-remote-debugger-via-cmd

https://exceptionnotfound.net/debugger-windows-in-visual-studio-2015-quick-guide/

Kernel mode debugging session http://www.vallejo.cc/2015/04/debugging-programs-with-multiple.html

Windbg server client setup
https://www.codeproject.com/articles/6084/windows-debuggers-part-1-a-windbg-tutorial
windbg -server
idea

====debugging_timetravel
> 10x-20x performance hit in typical recording scenarios
> Tracing a kernel mode process is not possible, only user mode can be traced.
https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windbg
https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview
https://github.com/microsoft/WinDbg-Samples/blob/master/TTDQueries/tutorial-instructions.md
https://learn.microsoft.com/en-us/windows-hardware/drivers/debuggercmds/time-travel-debugging-ttd-exe-command-line-util
=> use preferred method to also get the ttd.exe into system PATH
Double check in Powershell:
Import-Module -Name Appx -UseWindowsPowerShell
(Get-AppxPackage | where Name -eq 'Microsoft.TimeTravelDebugging').InstallLocation
(Get-AppxPackage | where Name -eq 'Microsoft.WinDbg').InstallLocation

Installation of package to install .appinstaller packages:
* Open in editor and download underlying .msixbundle
* Add-AppxPackage -Path C:\Path\App-Package.msixbundle
   Add-AppxPackage: Deployment failed with HRESULT: 0x80073CFF, To install this
   application you need either a Windows developer license or a
   sideloading-enabled system.
* https://github.com/microsoftfeedback/WinDbg-Feedback/issues/19
  * SHENNANIGAN msxixbundle and msix are both zip files

Installing .msi files:
https://powershellexplained.com/2016-10-21-powershell-installing-msi-files/
Installing Windows software remote:
https://powershellexplained.com/2017-04-22-Powershell-installing-remote-software/?utm_source=blog&utm_medium=blog&utm_content=installingmsifiles

https://learn.microsoft.com/en-us/windows-hardware/drivers/debuggercmds/time-travel-debugging-walkthrough

Alternatively, use TTD.exe (very much not great is that programs are run as admin):
ttd.exe ping.exe msn.com
ttd.exe -out "$HOME\traces\" cmd.exe
ttd.exe -out C:\traces -children cmd.exe /C ping.exe msn.com
Looks like this can only follow the child processes (no output from parent process):
ttd.exe -out "$HOME\traces\" -children cmd.exe /C ping.exe msn.com
ttd.exe -out "$HOME\traces\" -children cmd.exe ping.exe
ttd.exe -out "$HOME\traces\" -monitor notepad.exe
TaskList
ttd.exe -out "$HOME\traces\" -attach 21440
ttd.exe -out "$HOME\traces\" -monitor notepad.exe -monitor ping.exe
ttd.exe -stop all
ttd.exe -cleanup
max files size in MB: -maxfile 4096
max recording perf: -replaycpusupport mostaggressive
no noise: -noui -accepteula

Analysis of a time travel debugging trace
WinDbg
1. https://learn.microsoft.com/de-de/windows-hardware/drivers/debugger/getting-started-with-windbg
    UWP app, so its binaries span in multiple locations
    $HOME\AppData\Local\Microsoft\WindowsApps
      WinDbgX.exe
    C:\Program Files (x86)\Windows Kits\10\Debuggers\x64
    C:\Program Files (x86)\Windows Kits\10\Debuggers\x86
2. https://learn.microsoft.com/en-us/windows-hardware/drivers/debuggercmds/time-travel-debugging-replay
2. File -> start debugging -> launch executable (advanced)
3. File -> Start debugging -> Attach to process.
> WinDbg Command-Line Options

Step Back Forwards     p-  p
Trace Back Forwards    t-  t
Go Back Forwards       g-  g
windbg -srcpath SourcePath
====windbg_intro
best cheat sheet
https://github.com/hugsy/defcon_27_windbg_workshop/blob/main/windbg_cheatsheet.md

https://learn.microsoft.com/de-de/windows-hardware/drivers/debugger/getting-started-with-windbg--kernel-mode-
https://learn.microsoft.com/en-us/windows-hardware/drivers/debuggercmds/k--kb--kc--kd--kp--kp--kv--display-stack-backtrace-
https://gist.github.com/nickfloyd/a332462f85ac32372c74
.sympath srv*
.reload
x notepad!*
x notepad!wWin*
.frame - stack frame
dv or dt - value of variable.
bu notepad!wWinMain
bl
g
lm
k
bu ntdll!ZwWriteFile
bl
~
~0s
k

Analyze a problem:
!analyze -v

Show fixed symbol paths:
.symfix
.sympath+ path
Only needed, if symbols have not fully qualified paths
.srcpath+ path
.reload
bu MyApp!main
g
bp main
g
Controls
.lines            enable source line information
bp binname!main   set initial breakpoint
  Newer versions also support bp main
  This may fail, if symbol is incorrectly scoped, needed may be scope::fn_name
lm                list modules for bp usage (module!fn_name for non-executables)
l+t               stepping will be done by source line
l+s               source lines will be displayed at prompt
g                 run program until "main" is entered
pr                execute one source line, and toggle register display off
p                 execute one source line

Assembly:
switch mode: l+t (source) and l-t (assembly)
p,t,g for step, trace, go (semantics?)
p-,t-,g-
step out, into, over, go
datatype dt
sizeof sizeof()
.writemem FileName Range
SHENNANIGAN writemem does not detect hex length, so 0x30 would be 30 bytes
.writemem C:\Users\USER\Stack.bin 0x00000165e21c46f0 L48
.writemem C:\Users\USER\Stack.bin 0x00000165e21c46f0 0x30
Larger chunks needs L?: .writemem C:\Users\USER\Stack.bin 0x00000165e21c46f0 L?0x30
.readmem myfile 1000 10

Graphical usage available from VS2019 on and in VS Code (Time Travel Debug for C/C++ extension).

Performance profiling
http://euccas.github.io/blog/20180213/performance-profiling-tools-on-windows.html
Tools:
Windows Performance Recorder (WPR)
Windows Performance Analyzer (WPA)
PerfView
(including memory usage)
https://learn.microsoft.com/en-us/visualstudio/profiling/memory-usage-without-debugging2?view=vs-2022
https://github.com/matu3ba/win32k-mitigation/issues/1
reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\child_ntdll_only.exe" /v TracingFlags /t REG_DWORD /d 1 /f
reg delete "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\child_ntdll_only.exe"

====injection
Hooking in Windows
https://github.com/TsudaKageyu/minhook
https://github.com/microsoft/Detours
https://github.com/Hpmason/retour-rs
NtCreateSection, NtMapViewOfSection and RtlCreateUserThread
https://www.ired.team/offensive-security/code-injection-process-injection/ntcreatesection-+-ntmapviewofsection-code-injection

====perf_trace
https://github.com/google/UIforETW
Motivation https://randomascii.wordpress.com/2015/04/14/uiforetw-windows-performance-made-easier/
====central explanation page: https://randomascii.wordpress.com/2015/09/24/etw-central/
Getting traces https://randomascii.wordpress.com/2015/09/01/xperf-basics-recording-a-trace-the-ultimate-easy-way/
Getting traces as shortlink https://tinyurl.com/etwtracing
> not sure, try installing Intel Performance Counter Monitor
Analysis of traces: https://randomascii.wordpress.com/2014/08/19/etw-training-videos-available-now/

====profile_memory
Memory profiling
https://thatonegamedev.com/cpp/memory-profiling-on-windows-for-c/
https://stackoverflow.com/questions/4322678/how-to-do-memory-profiling-on-windows
https://stackoverflow.com/questions/413477/is-there-a-good-valgrind-substitute-for-windows
https://github.com/DynamoRIO/drmemory
https://github.com/RudjiGames/MTuner
AppVerifier https://learn.microsoft.com/en-us/windows/win32/win7appqual/application-verifier?redirectedfrom=MSDN

====trace_dtrace
https://learn.microsoft.com/de-de/windows-hardware/drivers/devtest/dtrace

Large and huge pages on Windows (2MB, 1GB)
https://mahdytech.com/large-pages-how-when/
- Large-Pages cannot be paged out, so they remain in RAM
- SeLockMemoryPrivilege is needed for a user, but it is persistent
```pwsh
$objUser = New-Object System.Security.Principal.NTAccount("USER")
$strSID = $objUser.Translate([System.Security.Principal.SecurityIdentifier])
$strSID.Value
```
wireguard on windows https://rair.dev/wireguard-windows-multiple-simultaneous-tunnels/
https://git.zx2c4.com/wireguard-windows/about/docs/netquirk.md
https://github.com/WireGuard/wireguard-windows

ssh server https://learn.microsoft.com/de-de/windows/terminal/tutorials/ssh

Nix on Windows
win10 https://nathan.gs/2019/04/12/nix-on-windows/
win11 https://www.reddit.com/r/NixOS/comments/151pm14/script_for_bootstrapping_nix_on_wsl/
iso does not work,
WSL instructions assume systemd etc https://nixos.org/download.html#nix-install-windows
https://github.com/nix-community/NixOS-WSL hangs
win11 https://github.com/scottstephens/nix-wsl-bootstrap
https://github.com/NixOS/nix/issues/5874

CLI Installation and Fixup
https://christitus.com/install-windows-the-arch-linux-way/
https://christitus.com/fix-corrupt-windows-install/

overview of basic ones https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf
https://learn.microsoft.com/en-us/visualstudio/ide/default-keyboard-shortcuts-in-visual-studio?view=vs-2022
https://learn.microsoft.com/de-de/visualstudio/ide/default-keyboard-shortcuts-in-visual-studio?view=vs-2022

shortcuts:
VS2015
next/prev tab              Ctrl-f6/Ctrl-Shift-f6
only compile current file  Ctrl-f7
search
  keyword                  Ctrl-,
  TODO                     Ctrl-t
  TODO                     Ctrl-f12
  symbol results           Shift-f12
quick action               Ctrl-.
close document window      Ctrl-f4
close all doc windows      Alt-w-l
snippet expanding          Ctrl-k-s
rename                     Ctrl-r,Ctrl-r
go
find                       Ctrl-f
  find next/prev           f3/Shift-f3
comment/uncomment          Ctrl-k Ctrl-c/Ctrl-k Ctrl-u
format
  file                     Ctrl-k Ctrl-d
  selection                Ctrl-k Ctrl-f
replace                    Ctrl-h
  within
  focus find entry         Alt-n
  focus replace field      Alt-p
  toggle match case        Alt-c
  toggle word              Alt-w
  toggle regex             Alt-e
  open loook in dropdown   Alt-l
  replace next             Alt-r
  replace all              Alt-a
  exit dialog              Esc
debugging+continue         f5
  stop debugging           Shift-f5
  toggle (enable) breakpt  (Ctrl-)f9
  step over                f10
  step into/out            f11/Shift-f11
  delete all breakpoints   Ctrl-Shift-f9
  break at fn              Ctrl-b
  break all                Ctrl-Alt-break
  run to cursor            Ctrl-f10
  set next statement       Ctrl-Shift-f10
  breakpoint window        Ctrl-Alt-b
git
  diff(unreliable)         Alt-f8
  stage                    TODO

toggle menu                Shift-f10
toggle dropdown menu       Alt-prefix
select
  word                     Ctrl-w
  line                     not in VS2015
select in component view   Ctrl-f2
  navigate                 tab
goto
  editing view                Esc
  cmd window                  Ctrl-Alt-a
  solution explorer           Ctrl-Alt-l
  out window                  Ctrl-Alt-o
  debugger                    Ctrl-Alt-b
  call hierachy               Ctrl-Alt-k
  class view                  Ctrl-Alt-c
  data sources                Shift-Alt-d
  edit master                 Ctrl-m Ctrl-m
  code coverage result        Ctrl-e-c
  shell                       Ctrl-ö
  code editor                 f7
  error list                  Ctrl-^-e
  tab finder                  Alt-f7
  mark12..                    ma and 'a but only per file not global
  before(/)after matching brace Ctrl-'`'
  between matching braces     Ctrl-}  (VS2019+)
    smart selection?
  next variable instance      Ctrl-Shift-Arrow
  next/pre error              Ctrl-Shift-f12/Shift-f8
  previous error              unmapped
  next/prev local error       unmapped
  next/prev issue             Alt-PgUp/PgDn (VS2019+)
  next/prev window            Ctrl-Tab/Ctrl-Shift-Tab
  back/forward            Ctrl-'-'/Ctrl-Shift-'-'
fold
  toggle region                 Ctrl-m Ctrl-m
  collapse all but classes      Ctrl-m-o
  collapse all                  Ctrl-m-a
  expand all                    Ctrl-m-l
  expand all disable outlines   Ctrl-m-p
  collapse/uncollapse region    Ctrl-m-h/Ctrl-m-u
view
  split                       Alt-w-p-Enter
    jump between              f6
  normal                      Alt-w-p-p-Enter
  peek                        Alt-f12
  bigger/smalelr              Ctrl-Shift-, and .

file operations
  add new file                Ctrl-Shift-a
  open file                   Ctrl-o
  close file                  Ctrl-f4

bookmarks
  toggle                          Ctrl-k Ctrl-k
  create new folder               Ctrl-k Ctrl-f
  prev/next                       Ctrl-k Ctrl-p/n
  prev/next in folder             Ctrl-Shift-k Ctrl-Shift-p/n
  jump to named one               not possible

multicursor
  selection                  Alt-mouse
  keyboard selection         Alt-Shift-Arrow
  VS2019+:
  multi-carets selection     Ctrl-Alt
  caret pattern selection    Alt-Shift-';'
  select next pattern match  Alt-Shift-'.'

remote desktop (rdp)
https://learn.microsoft.com/en-us/windows/win32/termserv/terminal-services-shortcut-keys
  start button press         windows + pos1 (home)   old?
                             alt+pos1 (home)         new?
  prev/next program          alt+page up/down
                             unclear: looks like tab is not reachable, alt broken with on-screen keyboard
  overview programs          ctrl+alt+tab
                             unclear

custom shortcuts (Tools -> Options -> Environment -> Keyboard -> inserttext -> Assign
SetAsStartUp   “Set as Startup Project”   Ctrl-s Ctrl-t
TODO: this breaks Ctrl-s for save, because VS has no "backoff" algorithm like vim

SHENNANIGAN shutdown script may not get called at all + no diagnosis
Otherwise: Local group policy.
gpedit.msc -> Computer Configuration > Windows Settings > Scripts (Startup/Shutdown) > Shutdown (See Below)

https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-system-calls-for-red-teams/
https://devblogs.microsoft.com/oldnewthing/20230926-00/?p=108824
https://www.ired.team/offensive-security/code-injection-process-injection/finding-kernel32-base-and-function-addresses-in-shellcode
https://chadaustin.me/2009/03/disabling-functions/
TODO disable kernel functions in Windows process
https://www.geoffchappell.com/studies/windows/win32/kernel32/api/index.htm
https://blog.improsec.com/tech-blog/win32k-system-call-filtering-deep-dive

https://rafaelhart.com/2014/12/nmap-wireshark/

====shell
https://learn.microsoft.com/en-us/visualstudio/ide/reference/command-prompt-powershell?view=vs-2022
Visual Studio Commandline Prompt
Visual Studio Developer Command Prompt, developer command prompt
Visual Studio Developer PowerShell, developer powershell
& 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\Launch-VsDevShell.ps1'
& 'C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Launch-VsDevShell.ps1'

====objdump
dumpbin -linkermember .\wpcap.lib
dumpbin /archivemembers|exports|symbols /OUT:filename .\wpcap.lib
dumpbin /dependents your_dll_file.dll
ldd your_dll_file.dll
Dependencies.exe -chain mydll.dll -depth 1
https://learn.microsoft.com/en-us/cpp/build/reference/linker-support-for-delay-loaded-dlls?view=msvc-170
https://stackoverflow.com/questions/495795/how-do-i-use-a-third-party-dll-file-in-visual-studio-c
https://stackoverflow.com/questions/7845886/linking-dll-in-visual-studio
https://learn.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=msvc-170
https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-best-practices

====link
https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-best-practices
https://stackoverflow.com/questions/24836194/windows-dll-dynamic-initialization-ordering
1. Import/export resolution just needs .dlls.
2. Static initialization just needs .dlls.
3. Dynamic initialization requires all imports to be resolved for the .dll.

start visual studio from terminal cli
code

SHENNANIGAN LoadLibray (temporary) uses up virtual memory in error cases, which can lead
to out of virtual memory situations (error 8). See https://github.com/matu3ba/win32k-mitigation

tracing ntdll calls
https://www.x86matthew.com/view_post?id=lognt32

SHENNANIGAN InitializeProcThreadAttributeList gives INVALID_PARAMETER (87) on
missing inheritance of a parameter without the docs describing any errors, even
in more complex Kernel APIs usage cases. The parameter must also never be NULL
or an invalid handle.

SHENNANIGAN TerminateThread and TerminateProcess() have severe semantic problems
https://wiki.sei.cmu.edu/confluence/display/c/WIN01-C.+Do+not+forcibly+terminate+execution
Replace thread with process.
* If target thread owns critical section, critical section will not be released.
* If target thread is allocating memory from heap, heap lock will not be released.
* If target thread is executing certain kernel32 calls when terminated, kernel32 state for the thread's process could be inconsistent.
* If target thread is manipulating global state of a shared DLL, state of the DLL could be destroyed, affecting other users of the DLL.
* On some platforms (such as Microsoft Windows XP and Microsoft Windows Server 2003), the thread's initial stack is not freed, causing resource leaks.

https://www.jeremyong.com/winapi/io/2024/11/03/windows-memory-mapped-file-io/
* memory mapped files

System libraries: Kernel mode debugging
C:\Windows\SysWOW64

https://www.elastic.co/security-labs/deep-dive-into-the-ttd-ecosystem
ttd  Tracing a kernel mode process is not possible

Windows <= 10 services can run processes as user SYSTEM != user Adminstrator.
SHENNANIGAN Windows >= 11 require hacks to run processes as SYSTEM.

====fast_admin_shell
Windows key + X
A

disable HyperV: Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor

====scheduling
https://randomascii.wordpress.com/2020/10/04/windows-timer-resolution-the-great-rule-change/
Scheduler sleep time between 0.5 and 16.656ms (typically 1ms).
clockres && Temp
Realtime threads not affected. Must be measured, for example with chrono.

====network
TODO debugging network
TODO commands to empty dns cache


====SMB_file_sharing
3 standard steps if the features is activated:
* 1. network adapter must have "file and printer sharing for Microsoft Networks" enabled
* 2. shared directory/folder must be set in
     Properties -> Sharing Avanced Sharing -> Share this folder, share name
* 3. Control Panel -> Network and Internet -> Network and Sharing Center  -> Advanced sharing setting
Test-NetConnection -ComputerName 192.168.1.55 -CommonTCPPort SMB
Get-SmbServerConfiguration | Select *protocol*
get-smbserverconfiguration
Check local port
Get-NetTCPConnection -LocalPort 139,445 -ea 0 | select Local*, Remote*, State, @{n="ProcessName";e={(Get-Process -Id $_.OwningProcess).ProcessName}} | ft -Auto
https://serverfault.com/questions/1011395/access-smb-over-a-custom-port
double check properties of adapter

net use DRIVE: \\IP\drive_without_colon\more_path
net use \\192.168.1.xx\<some-share> password /USER:username
copy \*.bak \\networklocation\sharefolder\*.bak
robocopy .\_ReleaseRevision_x64\bin\ \\192.168.1.24\d\ *.exe

====firewall
netsh firewall show state

====sandboxing
* Reduce Windows Kernel API surface
https://github.com/matu3ba/win32k-mitigation/blob/master/test/standalone/child_process_win32k_mitigation_z/child.zig
gdi32.dll and gdi32full.dll. Most of those should be mapped to a wow path
Not too sure, but suspecting GUI applications require some of the libs being used, see
https://stackoverflow.com/questions/63398081/windows-kernel32-dll-only-assembly-draw-pixel

====background
http://vikku.info/programming/win32api/prevent-windows-system-entering-idle-state-using-windowless-timers-getlastinputinfo.htm

====process
https://captmeelo.com/redteam/maldev/2022/05/10/ntcreateuserprocess.html
NtCreateProcess

====path
case sensivity
https://www.osnews.com/story/30417/how-to-enable-case-sensitivity-for-ntfs-support-for-folders/
https://learn.microsoft.com/en-us/windows/wsl/case-sensitivity

====network
nmap -sn 192.168.1.0/24
nslookup IP
nbtstat -a IP
arp -a
net view

====services
Stop-Service WinRM -PassThru
Set-Service WinRM -StartupType Disabled -PassThru

====ssh_windows_impl
templates/winrm

====ssh_logon_exec
* painfully slow
psexec
https://theitbros.com/using-psexec-to-run-commands-remotely/
Set-NetFirewallRule -DisplayGroup “File And Printer Sharing” -Enabled True -Profile Private,Domain
get-service LanmanServer,LanmanWorkstation
net view \\REMOTE_PC /all
  In a workgroup environment, you should also disable Remote UAC, which blocks remote access under local administrator accounts.
reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v "LocalAccountTokenFilterPolicy" /t REG_DWORD /d 1 /f
psexec /accepteula
psexec \\Remote -u USER -p PW command
psexec \\Remote -u USER -p PW ipconfig /flushdns
  bypass UAC restrictions
add flag -h

  restart pc
psexec \\Remote "cmd.exe" "/c shutdown /f /r /t 60"
  multiple cmds
psexec \\Remote CMD "cmd1 & cmd2 & cmd 3"
  interactive cmd[s]
psexec \\Remote CMD

  copy and run on remove computer
psexec \\Remote "c:\\Program Files (x86)\app\app.exe"
  use win32 api to show gui
psexec -i \\Remote notepad
  run cmd as SYSTEM user (like not possible in win11)
psexec -s cmd
  run cmd on multiple pcs
psexec \\PC1,PC2,PC3,PC33 "ipconfig /all"

psexec @c:\Users\$USER\pclist.txt ipconfig
PsExec @c:\Users\$USER\pclist.txt CMD /C "hostname & ipconfig" >> @c:\Users\$USER\remote_ips.txt

  Access Denied: check SMB connections are enabled
Test-NetConnection -ComputerName MYPC -Port 445
  Logon Failure: User has not be granted such rights
add -h
  error code 1
exit => exit / b 0

  list processes
Tasklist /fo table
pwsh Get-Process
  kill process
Taskkill /IM "process name" /F
pwsh Stop-Process -Name "ProcessName" -Force
pwsh Stop-Process -ID PID -Force

SHENNANIGAN too many ways to check hard drive status (smart)
wmic diskdrive get model,name,serialnumber,status
wmic /namespace:\\root\wmi path MSStorageDriver_FailurePredictStatus
Get-CimInstance -namespace root\wmi -class MSStorageDriver_FailurePredictStatus

https://www.codereversing.com/

Create lib from dll:
https://stackoverflow.com/questions/9360280/how-to-make-a-lib-file-when-have-a-dll-file-and-a-header-file

tiling wm on windows
https://lgug2z.github.io/komorebi/

https://learn.microsoft.com/de-de/cpp/intrinsics/rdtsc?view=msvc-170
get processor timestamp

https://stackoverflow.com/questions/19292655/c1189-error-no-target-architecture
use alignment in macros
#if defined(_AMD64_) || defined(_X86_)
#define PROBE_ALIGNMENT( _s ) TYPE_ALIGNMENT( DWORD )
#elif defined(_IA64_) || defined(_ARM_)
#define PROBE_ALIGNMENT( _s ) (TYPE_ALIGNMENT( _s ) > TYPE_ALIGNMENT( DWORD ) ? \
                              TYPE_ALIGNMENT( _s ) : TYPE_ALIGNMENT( DWORD ))
#elif !defined(RC_INVOKED)
#error "No Target Architecture"
#endif

SHENNANIGAN Portable include is #include <Windows.h>, but lower case also works on windows
SHENNANIGAN github runner wants <windows.h> or complains with
error: non-portable path to file '<windows.h>'; specified path differs in case
from file name on disk [-Werror,-Wnonportable-system-include-path].

SHENNANIGAN Windows Input is very much not nice to use
* use SDL3 instead https://gist.github.com/flibitijibibo/aa8a61196621adf17f76d182720830c1
https://ph3at.github.io/posts/Windows-Input/

https://googleprojectzero.blogspot.com/2024/06/the-windows-registry-adventure-3.html
Tools to inspect Windows registry
* windbg !reg querykey \Registry\Machine\Software\DefaultUserEnvironment
* pdbs
* regdump
* https://github.com/strozfriedberg/notatin
* https://github.com/ColinFinck/nt-hive
* https://github.com/libguestfs/hivex

====trace
* dtrace
bcdedit /set dtrace on
idea: example usage https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/dtrace

https://github.com/nix-community/NixOS-WSL/releases/tag/23.5.5.2
wsl --import NixOS .\NixOS\ nixos-wsl.tar.gz --version 2
wsl -d NixOS
wsl -s NixOS
wsl -d NixOS --system --user root -- /mnt/wslg/distro/bin/nixos-wsl-recovery
choose older versions with:
wsl -d NixOS --system --user root -- /mnt/wslg/distro/bin/nixos-wsl-recovery --system /nix/var/nix/profiles/system-42-link

C:\Users\USER\AppDir\buildBatch.bat
fd -uu -e tlog -x shasum.bat -a 512 {}
Get-ChildItem .\SDK\ -Recurse | Get-FileHash -Algorithm MD5

====kernel
https://learn.microsoft.com/en-us/archive/blogs/wsl/pico-process-overview
pico-process as foundation for WSL1
