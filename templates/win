Get installation location of msvc c, c++ compiler and linker with batch file:
cd %ProgramFiles(x86)%\Microsoft Visual Studio\Installer\
.\vswhere.exe
installationPath 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community'
fd cl.exe 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community'
fd link.exe 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community'
'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe'
'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\link.exe'
VS2015 x64 Native Tools Command Prompt
x64 Native Tools Command Prompt for VS2019

====build_system
.sln file contains 1. build modes (Debug/Release;x64 etc), 2. dependencies and
3. actively tracked dependencies (*must* be marked as actively tracked or they are
ignored, even though the dependency marks them as needed and there is a change)
Adjusting
1. graphically or via msbuild
2. via Right click on project => Build dependencies => Project dependencies
3. via below build modes "configuration manager" => Configuration Platform Build and Deploy

The build format is a hash like EAEE7988-385C-4CEF-AF76-20513D802A97 for each
project reference (with the hash being generated in an unspecified way), so
Visual Studio is needed to generate the hash for the project.

Clean rebuild and incremental for Debug and Release profiles
msbuild project.sln /t:Clean;Rebuild /p:Configuration=Debug /p:Platform=x64 -nologo
msbuild project.sln /t:Build /p:Configuration=Debug /p:Platform=x64 -nologo
msbuild project.sln /t:Clean;Rebuild /p:Configuration=Release /p:Platform=x64 -nologo
msbuild project.sln /t:Build /p:Configuration=Release /p:Platform=x64 -nologo -v:diag
Debug problems via -v:Lvl Lvl is q,m,n,d,diag
msbuild project.sln /t:Build /p:Configuration=Release /p:Platform=x64 -nologo -v:d

====build_problems
Build problems, ie incremental build problems:
Tools -> Options -> Proj & Sol. -> Build & Run -> build log verbosity -> diagnostic
Search for "Project not up to date because" or "missing".
Compare with msbuild output.

Generate compile_commands.json from Visual Studio with "Clang Power Tools VS extension".
This mandates Visual Studio >= 2017. Alternative of bear likely does not work.
https://clangpowertools.com/blog/generate-json-compilation-database.html

workaround admin privileges for installer files (.exe):
insert into run.bat with :set encoding=ansi
set __COMPAT_LAYER=RunAsInvoker
start INSTALLER.exe
and call it from cmd.exe as run.bat

zig:
Look into the ci scripts for windows https://github.com/ziglang/zig/tree/master/ci
and get https://ziglang.org/deps/zig+llvm+lld+clang-x86_64-windows-gnu-$VERSION.zip

Getting ntdll (and win32) calls
https://learn.microsoft.com/en-us/sysinternals/downloads/procmon
https://www.x86matthew.com/view_post?id=lognt32
http://jacquelin.potier.free.fr/winapioverride32/

Debugging methods
https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/choosing-the-best-remote-debugging-method
https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/remote-debugging-through-the-debugger
https://stackoverflow.com/questions/25032832/way-to-configure-vs-remote-debugger-via-cmd

Kernel mode debugging session http://www.vallejo.cc/2015/04/debugging-programs-with-multiple.html

Timetravel debugging
https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview
https://github.com/microsoft/WinDbg-Samples/blob/master/TTDQueries/tutorial-instructions.md

Performance profiling
http://euccas.github.io/blog/20180213/performance-profiling-tools-on-windows.html
(including memory usage)
https://learn.microsoft.com/en-us/visualstudio/profiling/memory-usage-without-debugging2?view=vs-2022
Windows Performance Analyzer

Perf traces
https://github.com/google/UIforETW

Memory profiling
https://thatonegamedev.com/cpp/memory-profiling-on-windows-for-c/
https://stackoverflow.com/questions/4322678/how-to-do-memory-profiling-on-windows
https://stackoverflow.com/questions/413477/is-there-a-good-valgrind-substitute-for-windows
https://github.com/DynamoRIO/drmemory
https://github.com/RudjiGames/MTuner
AppVerifier https://learn.microsoft.com/en-us/windows/win32/win7appqual/application-verifier?redirectedfrom=MSDN

Large and huge pages on Windows (2MB, 1GB)
https://mahdytech.com/large-pages-how-when/
- Large-Pages cannot be paged out, so they remain in RAM
- SeLockMemoryPrivilege is needed for a user, but it is persistent
```pwsh
$objUser = New-Object System.Security.Principal.NTAccount("USER")
$strSID = $objUser.Translate([System.Security.Principal.SecurityIdentifier])
$strSID.Value
```
wireguard on windows https://rair.dev/wireguard-windows-multiple-simultaneous-tunnels/
https://git.zx2c4.com/wireguard-windows/about/docs/netquirk.md
https://github.com/WireGuard/wireguard-windows

ssh server https://learn.microsoft.com/de-de/windows/terminal/tutorials/ssh

Nix on Windows
win10 https://nathan.gs/2019/04/12/nix-on-windows/
win11 https://www.reddit.com/r/NixOS/comments/151pm14/script_for_bootstrapping_nix_on_wsl/
iso does not work,
WSL instructions assume systemd etc https://nixos.org/download.html#nix-install-windows
https://github.com/nix-community/NixOS-WSL hangs
win11 https://github.com/scottstephens/nix-wsl-bootstrap
https://github.com/NixOS/nix/issues/5874

CLI Installation and Fixup
https://christitus.com/install-windows-the-arch-linux-way/
https://christitus.com/fix-corrupt-windows-install/

shorcuts:
VS2015
only compile current file  Ctrl-F7
search                     Ctrl-,
snippet expanding          Ctrl-k-s
rename                     Ctrl-r,Ctrl-r
go back                    Ctrl-'-'
find                       Ctrl-f
replace                    Ctrl-h
  within
  focus find entry         Alt-n
  focus replace field      Alt-p
  toggle match case        Alt-c
  toggle word              Alt-w
  toggle regex             Alt-e
  open loook in dropdown   Alt-l
  replace next             Alt-r
  replace all              Alt-a
  exit dialog              Esc
