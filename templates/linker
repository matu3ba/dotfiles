Force static linking:
gcc/g++ -static -static-libstdc++ -static-libgcc

Cross-compiling C++:
```sh
sudo apt-get install g++-VERSION-multilib-arm-linux-gnueabihf
export LD=arm-linux-gnueabihf-ld
export CXX=arm-linux-gnueabihf-g++-VERSION
export CXX_FLAGS="-static -static-libstdc++ -static-libgcc"
make -C builddir
```
ldd may stll falsely claim on host system, that the executable is statically build.
Alternative: buildchroot or zig

or fix the problem with the build system (include guards/linker scripts etc)

undefined symbols
nm -gD yourLib.so
C++ demangling
nm -gDC yourLib.so
nm yourlib | c++filt
nm -D /usr/lib/libc.so.6 | egrep 'memcpy|sleep'

"I" The symbol is an indirect reference to another symbol.
"i" ... For ELF format files this indicates that the symbol is an indirect function.
```
if you have no strong linkage of a symbol, but multiple weak linkages,
the tie breaker is the SIZE, and presumably if SIZE are all same,
then first one found on command line.
```
However, usually weak linkage can be overwritten by strong one.
Weak linkage further does mean that one does not need to use the symbols.

linking
-Iincludepath
-llibrary

However, the library may be already in your system paths.

When a library is scanned by the linker, only functions for which there
are already undefined references are linked. So you need to put the "consuming"
objects at the start of the link line, and the "supplying" objects at the end.

idea: instructions on how to debug lld etc

objdump -S to intermix the source
objdump -d for only the dump
objdump -h to dump section list
objdump --help | vi
Dump useful info from binary with debugging symbols
objdump -dxS -Mintel binary
Dump to show symbol names/relocations (used in linker) when disassembling.
objdump -drwC -Mintel object
Disassemble all, line numbers and all headers to get the memory address failure:
objdump -Dlx binary | less
To disassemble symbol + line numbers:
objdump -dl binary | less
To disassemble headers + line numbers (address is outside text segment):
objdump -xl binary | less

extern only, demangle
nm -g -C build/stage3/bin/zig

`nm` - show symbol table of an object or library.
`gcc -###` - gcc shows full commands it passes to the underlying tools.

https://maskray.me/blog/2021-12-19-why-isnt-ld.lld-faster

Tracing linker
mold -run make --trace
ld --trace
lld --trace

TODO linker types + tasks

debugging sections:
* naively via stack frame + uncompressed debug sections
* unwinding logic + compressed debug sections

Dynamic Array Tags, d_tag as specified by System V ABI contains:
Symbol                                 Executable   Shared object
DT_PREINIT_ARRAY, DT_PREINIT_ARRAYSZ   optional     ignored
DT_INIT_ARRAY, DT_INIT_ARRAYSZ         optional     optional
DT_FINIT_ARRAY, DT_FINIT_ARRAYSZ       optional     optional

C++ objects should in practice never be constructed via the preinit/init array above!
https://stackoverflow.com/questions/15265295/understanding-the-libc-init-array
```
#######  Part of the linker script may look like: #########
  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  } >FLASH
  .init_array :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
  } >FLASH
  ...
```

Sections named '.init, .ctors, .preinit_array, .init_array' => initialization of C/C++ objects,
Sections '.fini, .fini_array, .dtors' are for tear down C/C++ objects.
.preinit_array, .init_array contain arrays of functions to be called on initialization

'.ctors' and '.dtors' are deprecated artifacts not implemented by ld.ldd and unused
in newer ABI implementations like AArch64 and RISC-V.

Rename '.ctors' and '.dtors' section with:
objcopy --rename-section .ctors=.init_array --rename-section .dtors=.fini_array $file

Debug "static initialization order ‘fiasco’ (problem)" with
--shuffle-sections=.init_array=-1 --shuffle-sections=.fini_array=-1
or REVERSE in a linker script except for shared objects using DT_NEEDED.

Nitty details on https://maskray.me/blog/

Decide, if object file dynamically or statically linked:
readelf --program-headers --wide main.out
readelf -x .interp main.out
readelf --dynamic main.out
or more simpler `file file.out` to check for PT_DYNAMIC

##### ld featues #####
2 Invocation
- file
- archive, shared, default (-Bstatic, -Bdynamic)
- AUDITLIB to DT_AUDIT entry of dynamic section
  (colon separated list of audit interfaces to use)
  * if linker finds object with audit entry, it will add DT_DEPAUDIT in output file
  * only meaningful for ELF with rtld-audit interface
- input format
- script file input
- FORCE_COMMON_ALLOCATION
- non-contiguous regions xor INSERT statements
- set entry symbol
- exclude libs
- symbols in .def files are often exported regardless of exclude options
- export symbol(s) to dynamic table (from file)
- auxilary name
- filter
- DT_SONAME used by dynamic linker instead of file name given to linker
- incremental link
- use DT_INIT instead of _init
- TODO continue at '-l namespec'

TODO 3 Linker Scripts

TODO 4 Linker Plugins

TODO 5 Machine Dependent Features

TODO 6 BFD

TODO 7 MRI Compatible Script Files

literature: https://sourceware.org/binutils/docs-2.37/ld.pdf

embedded linker example
https://github.com/badgeteam/BadgerOS/blob/main/linker.ld
ESP32 binary built in the ld linker with ELF
you need to objcopy to binary to receive an ESP executable

TODO: explain dlopen, dlsym in terms of assembly
https://stackoverflow.com/questions/11741580/dlopen-loadlibrary-on-same-application
TODO summarize https://www.qualys.com/2023/06/06/renderdoc/renderdoc.txt
by functionality

TODO explain https://en.wikipedia.org/wiki/DLL_injection
