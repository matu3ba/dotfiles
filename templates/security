basics
applied_basics
bubblewrap for sandboxing


CASR: Crash Analysis and Severity Report
AFL: Fuzzing crashes

====basics

Micro-Kernel: Nothing enabled on default with user needing to setup things.
Mono/Uni-Kernel: Most things enabled on default with user needing to disable things.
Design of Uni-Kernel alone makes less unsecure due to less isolation of components.

Note: Linux is becoming more Micro-Kernel-like with io_uring as 0-copy messaging,
bpf as VM running statically compiled code inside Linux etc.

Proof code effort is quadratic to code size:
* Bug hidden for any non-trivial or verified implementation.
* Use the simplest approach possible, isolate components
* If unfeasible to rule out intruders, you must monitor and mitigate including
  all related costs.
* Plan for the worst case

=> seL4 would be ideal to use, but maybe there is a tradeoff to allow some
more monitoring or control on the host system ie to debug the VM?
=> Push-Button (SMT) technique:
   * specify correctness condition
   * state exploration tool
   * only proves simple properties
=> Model checking
   * simple model of system for exhaustively search state space,
   * more limited than SMT
=> Framework Microkit for minimal abstractions => Lions OS (optimized for 1 specific use case)
=> Pancake used in seL4, which is the imperative part of CakeML.
   * C-like but safer
   * written in CakeML
Unclear: Verification of linker + linker speak (object format)?

Timing channels in protocols are a huge problem
* using wireguard instead of openVPN to run ssh over it does not eliminate the
  timing channel
* must analyze frequencies, meaning plot a few dimensions against time, like
  packet size, length on router level for whatever tool you are suspicious off.
* Interact and try to identify differences (patterns etc).

idea examples or tools to for time analysis (io, network etc)

====applied_basics

basics https://phoenixnap.com/kb/server-security-tips

====jail

Linux
1. wireguard + ssh (on another port)
  * (dynamic) port forwarding and all those things
  * TODO
2. sandboxed environment (jails, zones, containers)
  * seccomp (whitelist of Kernel calls)
  * file system overlay
  * ulimit or cgroups pendant
  * landlock (Kernel object access)
  * network access removed (routing, connection interfaces etc)
  * cpu, io, memory limits
  * max. execution time
  * no clipboard access etc
  * no login manager entry
  * cgroups, apparmor, selinux needed?
  * paging (disable Kernel Samepage Merging)
  * Kernel config https://www.timesys.com/security/securing-your-linux-configuration-kernel-hardening/
3. unprivileged user
4. coredump + stack trace obtainable,
5. reaper pid to kill child processes
6. restricting ptrace to only 1 process required selinux policy
https://serverfault.com/questions/933205/selinux-policy-for-cap-sys-ptrace-by-invoking-process-name,
but should work now in landlock:
https://docs.kernel.org/userspace-api/landlock.html#ptrace-restrictions
"To be allowed to use ptrace(2) and related syscalls on a target
process, a sandboxed process should have a subset of the target process rules,
which means the tracee must be in a sub-domain of the tracer."
Unfortunately it does not say "must have".
7. disable hyperthreading (in bios)
8. hardened kernel?

Windows "Win32 app isolation"
TODO list capabilities

Microkernel/no OS: Single security boundary
sel4 : specific individual capabilities

====bubblewrap
bwrap --unshare-user --uid $(id -u) --gid $(id -g) --proc /proc --dev /dev --tmpfs /tmp \
        --ro-bind /bin/ /bin/ \
        --ro-bind /etc/ /etc/ \
        --ro-bind /lib/ /lib/ \
        --ro-bind /lib64/ /lib64/ \
        --ro-bind /run/ /run/ \
        --ro-bind /usr/ /usr/ \
        --ro-bind /var /var \
        --bind $(pwd) $(pwd) \
        --bind ~/.config/nix ~/.config/nix \
        --bind ./mynixroot /nix \
        ./nix build 'nixpkgs#'
https://sandstorm.io/

====virtualization

Note: Without kvm qemu is very slow and with kvm qemu has a huge attack surface
from the guest OS.

* qemu qmp (or use qemus gdb stub) to read the vm's memory
* attach serial channel to qemu machine and write stuff to that (treat the read bytes as plain and potentially malicious data)

TODO talk on youtube on VMs
Advancements for seL4 Virtualization Support
CAmkES and seL4cp Microkit
IOMMU Solutions for seL4

====allocators

Preventing Use-After-Free Attacks with Fast Forward Allocation
* overhead in runtime perf vs glibc
  + allegedly ~2.3% for one-time allocations
  + up to 35% due to mmap-sem lock in Linux kernel
  + ~60% memory overhead
  + nginx testing with comparable throughput
* lesson: One-time-allocation effective + simple to implement

====html
* could use HTTP/1.1, mandate pipelining and TLS 1.2 to get most advantages without the drawbacks
* multiplexing bad idea unless server has logic for fair scheduling (usually has not) and opens door for denial of service
* too complex, useless freedom of choice
* HTTP/1.1 drawbacks from https://sookocheff.com/post/networking/how-does-http-2-work/
  - head of line blocking, solution: server implements pipelining, bad: rely on time behavior (better protocols exist)
  - congestion window adjusting for handling many domains, solution: do scheduling yourself, bad: externalize as attack vector
  - header data duplication due to being stateless, solution: better defaults, bad: save more state for compression
  - there is no formal model (state automaton) of HTTP2.0, not even from the client

====virtual_machine
vmm as virtual machine monitor
qemu alternate and simpler implementations with the same feature matrix support?
see https://www.youtube.com/watch?v=O_NI61ADxjk and
https://cloud.google.com/blog/products/gcp/7-ways-we-harden-our-kvm-hypervisor-at-google-cloud-security-in-plaintext
https://superuser.com/questions/1490188/what-is-the-difference-and-relationship-between-kvm-virt-manager-qemu-and-libv

https://bellard.org/tinyemu/
vmm is very openbsd-specific, uses a serial port, single core, and x86-only
https://www.openbsd.org/faq/faq16.html

====state_stateless_splitting
* handling non-software state
  - hardware (for drivers etc)
* stateful components
  - reset communication channels
  - restarting component
* stateless components
* No crash if, 1. no need, failure not caused 2. by component state (hw) or 3.
  erroneous state (correct states causes fault), 4. critical state, 5.
  erroneous state persistent
* persistent failures (heuristics): restart count, increase restart domain, sanitise
  persistent state, reinstall, revert, update component code, give up

====pentesting
hacktricks.xyz https://book.hacktricks.xyz
https://github.com/carlospolop/hacktricks
https://github.com/carlospolop/hacktricks-cloud
phrack magazine

====general
Incomplete list of intrusion prevention and detection:
* login policy
* least privilege (network services non-privileged)
* chroot jails or containers for network services
* secured web content, encrypted authentication etc
* fast patching
* SELinux or Apparmor in enforcing mode
* Tripwire or other intrusion detection software and schemes to detect changes to critical files.
* rootkit detection scanners periodically
* strict firewall rules, port forwarding etc
* correct file permissions
* secure backup copies of system software and data
* sys bootstrapping from local storage until hardening applied
* write down attack vectors and plan etc